// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_import

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

// Auto-generated initialization code.

final ffi.Pointer<T> Function<T extends ffi.NativeType>(String sym) jniLookup =
    ProtectedJniExtensions.initGeneratedLibrary("fox_http");

/// from: okhttp3.OkHttpClient
class OkHttpClient extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  OkHttpClient.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $OkHttpClientType();

  static final _ctor = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "OkHttpClient__ctor")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  OkHttpClient() : super.fromRef(_ctor().object);

  static final _callTimeoutMillis = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__callTimeoutMillis")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int callTimeoutMillis()
  int callTimeoutMillis() => _callTimeoutMillis(reference).integer;

  static final _connectTimeoutMillis = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__connectTimeoutMillis")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int connectTimeoutMillis()
  int connectTimeoutMillis() => _connectTimeoutMillis(reference).integer;

  static final _readTimeoutMillis = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__readTimeoutMillis")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int readTimeoutMillis()
  int readTimeoutMillis() => _readTimeoutMillis(reference).integer;

  static final _writeTimeoutMillis = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__writeTimeoutMillis")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int writeTimeoutMillis()
  int writeTimeoutMillis() => _writeTimeoutMillis(reference).integer;

  static final _pingIntervalMillis = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__pingIntervalMillis")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int pingIntervalMillis()
  int pingIntervalMillis() => _pingIntervalMillis(reference).integer;

  static final _proxy = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__proxy")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.net.Proxy proxy()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject proxy() =>
      const jni.JObjectType().fromRef(_proxy(reference).object);

  static final _proxySelector = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__proxySelector")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.net.ProxySelector proxySelector()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject proxySelector() =>
      const jni.JObjectType().fromRef(_proxySelector(reference).object);

  static final _cookieJar = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__cookieJar")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.CookieJar cookieJar()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject cookieJar() =>
      const jni.JObjectType().fromRef(_cookieJar(reference).object);

  static final _cache = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__cache")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Cache cache()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject cache() =>
      const jni.JObjectType().fromRef(_cache(reference).object);

  static final _dns = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__dns")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Dns dns()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject dns() => const jni.JObjectType().fromRef(_dns(reference).object);

  static final _socketFactory = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__socketFactory")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public javax.net.SocketFactory socketFactory()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject socketFactory() =>
      const jni.JObjectType().fromRef(_socketFactory(reference).object);

  static final _sslSocketFactory = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__sslSocketFactory")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public javax.net.ssl.SSLSocketFactory sslSocketFactory()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject sslSocketFactory() =>
      const jni.JObjectType().fromRef(_sslSocketFactory(reference).object);

  static final _hostnameVerifier = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__hostnameVerifier")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public javax.net.ssl.HostnameVerifier hostnameVerifier()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject hostnameVerifier() =>
      const jni.JObjectType().fromRef(_hostnameVerifier(reference).object);

  static final _certificatePinner = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__certificatePinner")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.CertificatePinner certificatePinner()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject certificatePinner() =>
      const jni.JObjectType().fromRef(_certificatePinner(reference).object);

  static final _authenticator = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__authenticator")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Authenticator authenticator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject authenticator() =>
      const jni.JObjectType().fromRef(_authenticator(reference).object);

  static final _proxyAuthenticator = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__proxyAuthenticator")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Authenticator proxyAuthenticator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject proxyAuthenticator() =>
      const jni.JObjectType().fromRef(_proxyAuthenticator(reference).object);

  static final _connectionPool = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__connectionPool")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.ConnectionPool connectionPool()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject connectionPool() =>
      const jni.JObjectType().fromRef(_connectionPool(reference).object);

  static final _followSslRedirects = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__followSslRedirects")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean followSslRedirects()
  bool followSslRedirects() => _followSslRedirects(reference).boolean;

  static final _followRedirects = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__followRedirects")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean followRedirects()
  bool followRedirects() => _followRedirects(reference).boolean;

  static final _retryOnConnectionFailure = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "OkHttpClient__retryOnConnectionFailure")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean retryOnConnectionFailure()
  bool retryOnConnectionFailure() =>
      _retryOnConnectionFailure(reference).boolean;

  static final _dispatcher = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__dispatcher")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Dispatcher dispatcher()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject dispatcher() =>
      const jni.JObjectType().fromRef(_dispatcher(reference).object);

  static final _protocols = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__protocols")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List protocols()
  /// The returned object must be deleted after use, by calling the `delete` method.
  List<jni.JObject> protocols() =>
      const $ListType(jni.JObjectType()).fromRef(_protocols(reference).object);

  static final _connectionSpecs = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__connectionSpecs")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List connectionSpecs()
  /// The returned object must be deleted after use, by calling the `delete` method.
  List<jni.JObject> connectionSpecs() => const $ListType(jni.JObjectType())
      .fromRef(_connectionSpecs(reference).object);

  static final _interceptors = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__interceptors")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List interceptors()
  /// The returned object must be deleted after use, by calling the `delete` method.
  List<Interceptor> interceptors() => const $ListType($InterceptorType())
      .fromRef(_interceptors(reference).object);

  static final _networkInterceptors = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__networkInterceptors")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List networkInterceptors()
  /// The returned object must be deleted after use, by calling the `delete` method.
  List<Interceptor> networkInterceptors() => const $ListType($InterceptorType())
      .fromRef(_networkInterceptors(reference).object);

  static final _eventListenerFactory = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__eventListenerFactory")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.EventListener$Factory eventListenerFactory()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject eventListenerFactory() =>
      const jni.JObjectType().fromRef(_eventListenerFactory(reference).object);

  static final _newCall = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__newCall")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Call newCall(okhttp3.Request request)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Call newCall(Request request) =>
      const $CallType().fromRef(_newCall(reference, request.reference).object);

  static final _newWebSocket = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__newWebSocket")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.WebSocket newWebSocket(okhttp3.Request request, okhttp3.WebSocketListener webSocketListener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject newWebSocket(Request request, jni.JObject webSocketListener) =>
      const jni.JObjectType().fromRef(_newWebSocket(
              reference, request.reference, webSocketListener.reference)
          .object);

  static final _newBuilder = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient__newBuilder")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder newBuilder()
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder newBuilder() =>
      const $OkHttpClient_BuilderType().fromRef(_newBuilder(reference).object);
}

class $OkHttpClientType extends jni.JObjType<OkHttpClient> {
  const $OkHttpClientType();

  @override
  String get signature => r"Lokhttp3/OkHttpClient;";

  @override
  OkHttpClient fromRef(jni.JObjectPtr ref) => OkHttpClient.fromRef(ref);
}

extension $OkHttpClientArray on jni.JArray<OkHttpClient> {
  OkHttpClient operator [](int index) {
    return (elementType as $OkHttpClientType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, OkHttpClient value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okhttp3.OkHttpClient$Builder
class OkHttpClient_Builder extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  OkHttpClient_Builder.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $OkHttpClient_BuilderType();

  static final _ctor = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "OkHttpClient_Builder__ctor")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  OkHttpClient_Builder() : super.fromRef(_ctor().object);

  static final _callTimeout = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient_Builder__callTimeout")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder callTimeout(long j, java.util.concurrent.TimeUnit timeUnit)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder callTimeout(int j, TimeUnit timeUnit) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_callTimeout(reference, j, timeUnit.reference).object);

  static final _callTimeout1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient_Builder__callTimeout1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder callTimeout(java.time.Duration duration)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder callTimeout1(jni.JObject duration) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_callTimeout1(reference, duration.reference).object);

  static final _connectTimeout = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                      ffi.Pointer<ffi.Void>)>>(
          "OkHttpClient_Builder__connectTimeout")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder connectTimeout(long j, java.util.concurrent.TimeUnit timeUnit)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder connectTimeout(int j, TimeUnit timeUnit) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_connectTimeout(reference, j, timeUnit.reference).object);

  static final _connectTimeout1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "OkHttpClient_Builder__connectTimeout1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder connectTimeout(java.time.Duration duration)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder connectTimeout1(jni.JObject duration) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_connectTimeout1(reference, duration.reference).object);

  static final _readTimeout = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient_Builder__readTimeout")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder readTimeout(long j, java.util.concurrent.TimeUnit timeUnit)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder readTimeout(int j, TimeUnit timeUnit) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_readTimeout(reference, j, timeUnit.reference).object);

  static final _readTimeout1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient_Builder__readTimeout1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder readTimeout(java.time.Duration duration)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder readTimeout1(jni.JObject duration) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_readTimeout1(reference, duration.reference).object);

  static final _writeTimeout = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient_Builder__writeTimeout")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder writeTimeout(long j, java.util.concurrent.TimeUnit timeUnit)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder writeTimeout(int j, TimeUnit timeUnit) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_writeTimeout(reference, j, timeUnit.reference).object);

  static final _writeTimeout1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "OkHttpClient_Builder__writeTimeout1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder writeTimeout(java.time.Duration duration)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder writeTimeout1(jni.JObject duration) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_writeTimeout1(reference, duration.reference).object);

  static final _pingInterval = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient_Builder__pingInterval")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder pingInterval(long j, java.util.concurrent.TimeUnit timeUnit)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder pingInterval(int j, TimeUnit timeUnit) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_pingInterval(reference, j, timeUnit.reference).object);

  static final _pingInterval1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "OkHttpClient_Builder__pingInterval1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder pingInterval(java.time.Duration duration)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder pingInterval1(jni.JObject duration) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_pingInterval1(reference, duration.reference).object);

  static final _proxy = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient_Builder__proxy")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder proxy(java.net.Proxy proxy)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder proxy(jni.JObject proxy) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_proxy(reference, proxy.reference).object);

  static final _proxySelector = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "OkHttpClient_Builder__proxySelector")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder proxySelector(java.net.ProxySelector proxySelector)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder proxySelector(jni.JObject proxySelector) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_proxySelector(reference, proxySelector.reference).object);

  static final _cookieJar = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient_Builder__cookieJar")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder cookieJar(okhttp3.CookieJar cookieJar)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder cookieJar(jni.JObject cookieJar) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_cookieJar(reference, cookieJar.reference).object);

  static final _cache = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient_Builder__cache")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder cache(okhttp3.Cache cache)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder cache(jni.JObject cache) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_cache(reference, cache.reference).object);

  static final _dns = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient_Builder__dns")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder dns(okhttp3.Dns dns)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder dns(jni.JObject dns) => const $OkHttpClient_BuilderType()
      .fromRef(_dns(reference, dns.reference).object);

  static final _socketFactory = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "OkHttpClient_Builder__socketFactory")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder socketFactory(javax.net.SocketFactory socketFactory)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder socketFactory(jni.JObject socketFactory) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_socketFactory(reference, socketFactory.reference).object);

  static final _sslSocketFactory = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "OkHttpClient_Builder__sslSocketFactory")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory sSLSocketFactory)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder sslSocketFactory(jni.JObject sSLSocketFactory) =>
      const $OkHttpClient_BuilderType().fromRef(
          _sslSocketFactory(reference, sSLSocketFactory.reference).object);

  static final _sslSocketFactory1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "OkHttpClient_Builder__sslSocketFactory1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory sSLSocketFactory, javax.net.ssl.X509TrustManager x509TrustManager)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder sslSocketFactory1(
          jni.JObject sSLSocketFactory, jni.JObject x509TrustManager) =>
      const $OkHttpClient_BuilderType().fromRef(_sslSocketFactory1(
              reference, sSLSocketFactory.reference, x509TrustManager.reference)
          .object);

  static final _hostnameVerifier = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "OkHttpClient_Builder__hostnameVerifier")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder hostnameVerifier(javax.net.ssl.HostnameVerifier hostnameVerifier)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder hostnameVerifier(jni.JObject hostnameVerifier) =>
      const $OkHttpClient_BuilderType().fromRef(
          _hostnameVerifier(reference, hostnameVerifier.reference).object);

  static final _certificatePinner = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "OkHttpClient_Builder__certificatePinner")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder certificatePinner(okhttp3.CertificatePinner certificatePinner)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder certificatePinner(jni.JObject certificatePinner) =>
      const $OkHttpClient_BuilderType().fromRef(
          _certificatePinner(reference, certificatePinner.reference).object);

  static final _authenticator = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "OkHttpClient_Builder__authenticator")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder authenticator(okhttp3.Authenticator authenticator)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder authenticator(jni.JObject authenticator) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_authenticator(reference, authenticator.reference).object);

  static final _proxyAuthenticator = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "OkHttpClient_Builder__proxyAuthenticator")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder proxyAuthenticator(okhttp3.Authenticator authenticator)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder proxyAuthenticator(jni.JObject authenticator) =>
      const $OkHttpClient_BuilderType().fromRef(
          _proxyAuthenticator(reference, authenticator.reference).object);

  static final _connectionPool = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "OkHttpClient_Builder__connectionPool")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder connectionPool(okhttp3.ConnectionPool connectionPool)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder connectionPool(jni.JObject connectionPool) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_connectionPool(reference, connectionPool.reference).object);

  static final _followSslRedirects = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("OkHttpClient_Builder__followSslRedirects")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public okhttp3.OkHttpClient$Builder followSslRedirects(boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder followSslRedirects(bool z) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_followSslRedirects(reference, z ? 1 : 0).object);

  static final _followRedirects = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("OkHttpClient_Builder__followRedirects")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public okhttp3.OkHttpClient$Builder followRedirects(boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder followRedirects(bool z) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_followRedirects(reference, z ? 1 : 0).object);

  static final _retryOnConnectionFailure = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("OkHttpClient_Builder__retryOnConnectionFailure")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public okhttp3.OkHttpClient$Builder retryOnConnectionFailure(boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder retryOnConnectionFailure(bool z) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_retryOnConnectionFailure(reference, z ? 1 : 0).object);

  static final _dispatcher = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient_Builder__dispatcher")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder dispatcher(okhttp3.Dispatcher dispatcher)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder dispatcher(jni.JObject dispatcher) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_dispatcher(reference, dispatcher.reference).object);

  static final _protocols = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient_Builder__protocols")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder protocols(java.util.List list)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder protocols(List<jni.JObject> list) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_protocols(reference, list.reference).object);

  static final _connectionSpecs = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "OkHttpClient_Builder__connectionSpecs")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder connectionSpecs(java.util.List list)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder connectionSpecs(List<jni.JObject> list) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_connectionSpecs(reference, list.reference).object);

  static final _interceptors = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient_Builder__interceptors")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List interceptors()
  /// The returned object must be deleted after use, by calling the `delete` method.
  List<Interceptor> interceptors() => const $ListType($InterceptorType())
      .fromRef(_interceptors(reference).object);

  static final _addInterceptor = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "OkHttpClient_Builder__addInterceptor")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor interceptor)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder addInterceptor(Interceptor interceptor) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_addInterceptor(reference, interceptor.reference).object);

  static final _networkInterceptors = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "OkHttpClient_Builder__networkInterceptors")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List networkInterceptors()
  /// The returned object must be deleted after use, by calling the `delete` method.
  List<Interceptor> networkInterceptors() => const $ListType($InterceptorType())
      .fromRef(_networkInterceptors(reference).object);

  static final _addNetworkInterceptor = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "OkHttpClient_Builder__addNetworkInterceptor")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder addNetworkInterceptor(okhttp3.Interceptor interceptor)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder addNetworkInterceptor(Interceptor interceptor) =>
      const $OkHttpClient_BuilderType().fromRef(
          _addNetworkInterceptor(reference, interceptor.reference).object);

  static final _eventListener = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "OkHttpClient_Builder__eventListener")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder eventListener(okhttp3.EventListener eventListener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder eventListener(jni.JObject eventListener) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_eventListener(reference, eventListener.reference).object);

  static final _eventListenerFactory = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "OkHttpClient_Builder__eventListenerFactory")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient$Builder eventListenerFactory(okhttp3.EventListener$Factory factory)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder eventListenerFactory(jni.JObject factory0) =>
      const $OkHttpClient_BuilderType()
          .fromRef(_eventListenerFactory(reference, factory0.reference).object);

  static final _build = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("OkHttpClient_Builder__build")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.OkHttpClient build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient build() =>
      const $OkHttpClientType().fromRef(_build(reference).object);
}

class $OkHttpClient_BuilderType extends jni.JObjType<OkHttpClient_Builder> {
  const $OkHttpClient_BuilderType();

  @override
  String get signature => r"Lokhttp3/OkHttpClient$Builder;";

  @override
  OkHttpClient_Builder fromRef(jni.JObjectPtr ref) =>
      OkHttpClient_Builder.fromRef(ref);
}

extension $OkHttpClient_BuilderArray on jni.JArray<OkHttpClient_Builder> {
  OkHttpClient_Builder operator [](int index) {
    return (elementType as $OkHttpClient_BuilderType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, OkHttpClient_Builder value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okhttp3.Call
class Call extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  Call.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $CallType();

  static final _request = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Call__request")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract okhttp3.Request request()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request request() => const $RequestType().fromRef(_request(reference).object);

  static final _execute = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Call__execute")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract okhttp3.Response execute()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Response execute() =>
      const $ResponseType().fromRef(_execute(reference).object);

  static final _enqueue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Call__enqueue")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enqueue(okhttp3.Callback callback)
  void enqueue(jni.JObject callback) =>
      _enqueue(reference, callback.reference).check();

  static final _cancel = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Call__cancel")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void cancel()
  void cancel() => _cancel(reference).check();

  static final _isExecuted = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Call__isExecuted")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean isExecuted()
  bool isExecuted() => _isExecuted(reference).boolean;

  static final _isCanceled = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Call__isCanceled")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean isCanceled()
  bool isCanceled() => _isCanceled(reference).boolean;

  static final _timeout = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Call__timeout")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract okio.Timeout timeout()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Timeout timeout() => const $TimeoutType().fromRef(_timeout(reference).object);

  static final _clone = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Call__clone")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract okhttp3.Call clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Call clone() => const $CallType().fromRef(_clone(reference).object);
}

class $CallType extends jni.JObjType<Call> {
  const $CallType();

  @override
  String get signature => r"Lokhttp3/Call;";

  @override
  Call fromRef(jni.JObjectPtr ref) => Call.fromRef(ref);
}

extension $CallArray on jni.JArray<Call> {
  Call operator [](int index) {
    return (elementType as $CallType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, Call value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okhttp3.Headers
class Headers extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  Headers.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $HeadersType();

  static final _get0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Headers__get0")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String get(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString get0(jni.JString string) => const jni.JStringType()
      .fromRef(_get0(reference, string.reference).object);

  static final _getDate = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Headers__getDate")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Date getDate(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Date getDate(jni.JString string) =>
      const $DateType().fromRef(_getDate(reference, string.reference).object);

  static final _getInstant = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Headers__getInstant")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant getInstant(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getInstant(jni.JString string) => const jni.JObjectType()
      .fromRef(_getInstant(reference, string.reference).object);

  static final _size = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Headers__size")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int size()
  int size() => _size(reference).integer;

  static final _name = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Headers__name")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.String name(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString name(int i) =>
      const jni.JStringType().fromRef(_name(reference, i).object);

  static final _value = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Headers__value")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.String value(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString value(int i) =>
      const jni.JStringType().fromRef(_value(reference, i).object);

  static final _names = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Headers__names")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set names()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Set<jni.JString> names() =>
      const $SetType(jni.JStringType()).fromRef(_names(reference).object);

  static final _values = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Headers__values")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List values(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  List<jni.JString> values(jni.JString string) =>
      const $ListType(jni.JStringType())
          .fromRef(_values(reference, string.reference).object);

  static final _byteCount = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Headers__byteCount")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long byteCount()
  int byteCount() => _byteCount(reference).long;

  static final _newBuilder = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Headers__newBuilder")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Headers$Builder newBuilder()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers_Builder newBuilder() =>
      const $Headers_BuilderType().fromRef(_newBuilder(reference).object);

  static final _equals1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Headers__equals1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals1(jni.JObject object) =>
      _equals1(reference, object.reference).boolean;

  static final _hashCode1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Headers__hashCode1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode1() => _hashCode1(reference).integer;

  static final _toString1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Headers__toString1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString toString1() =>
      const jni.JStringType().fromRef(_toString1(reference).object);

  static final _toMultimap = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Headers__toMultimap")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Map toMultimap()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Map<jni.JString, List<jni.JString>> toMultimap() =>
      const $MapType(jni.JStringType(), $ListType(jni.JStringType()))
          .fromRef(_toMultimap(reference).object);

  static final _of = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Headers__of")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public okhttp3.Headers of(java.lang.String[] strings)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Headers of(jni.JArray<jni.JString> strings) =>
      const $HeadersType().fromRef(_of(strings.reference).object);

  static final _of1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Headers__of1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public okhttp3.Headers of(java.util.Map map)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Headers of1(Map<jni.JString, jni.JString> map) =>
      const $HeadersType().fromRef(_of1(map.reference).object);
}

class $HeadersType extends jni.JObjType<Headers> {
  const $HeadersType();

  @override
  String get signature => r"Lokhttp3/Headers;";

  @override
  Headers fromRef(jni.JObjectPtr ref) => Headers.fromRef(ref);
}

extension $HeadersArray on jni.JArray<Headers> {
  Headers operator [](int index) {
    return (elementType as $HeadersType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, Headers value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okhttp3.Headers$Builder
class Headers_Builder extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  Headers_Builder.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Headers_BuilderType();

  static final _ctor = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "Headers_Builder__ctor")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  Headers_Builder() : super.fromRef(_ctor().object);

  static final _add = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Headers_Builder__add")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Headers$Builder add(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers_Builder add(jni.JString string) => const $Headers_BuilderType()
      .fromRef(_add(reference, string.reference).object);

  static final _add1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Headers_Builder__add1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Headers$Builder add(java.lang.String string, java.lang.String string1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers_Builder add1(jni.JString string, jni.JString string1) =>
      const $Headers_BuilderType().fromRef(
          _add1(reference, string.reference, string1.reference).object);

  static final _addUnsafeNonAscii = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Headers_Builder__addUnsafeNonAscii")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Headers$Builder addUnsafeNonAscii(java.lang.String string, java.lang.String string1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers_Builder addUnsafeNonAscii(jni.JString string, jni.JString string1) =>
      const $Headers_BuilderType().fromRef(
          _addUnsafeNonAscii(reference, string.reference, string1.reference)
              .object);

  static final _addAll = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Headers_Builder__addAll")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Headers$Builder addAll(okhttp3.Headers headers)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers_Builder addAll(Headers headers) => const $Headers_BuilderType()
      .fromRef(_addAll(reference, headers.reference).object);

  static final _add2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Headers_Builder__add2")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Headers$Builder add(java.lang.String string, java.util.Date date)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers_Builder add2(jni.JString string, Date date) =>
      const $Headers_BuilderType()
          .fromRef(_add2(reference, string.reference, date.reference).object);

  static final _add3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Headers_Builder__add3")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Headers$Builder add(java.lang.String string, java.time.Instant instant)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers_Builder add3(jni.JString string, jni.JObject instant) =>
      const $Headers_BuilderType().fromRef(
          _add3(reference, string.reference, instant.reference).object);

  static final _set0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Headers_Builder__set0")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Headers$Builder set(java.lang.String string, java.util.Date date)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers_Builder set0(jni.JString string, Date date) =>
      const $Headers_BuilderType()
          .fromRef(_set0(reference, string.reference, date.reference).object);

  static final _set1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Headers_Builder__set1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Headers$Builder set(java.lang.String string, java.time.Instant instant)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers_Builder set1(jni.JString string, jni.JObject instant) =>
      const $Headers_BuilderType().fromRef(
          _set1(reference, string.reference, instant.reference).object);

  static final _removeAll = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Headers_Builder__removeAll")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Headers$Builder removeAll(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers_Builder removeAll(jni.JString string) => const $Headers_BuilderType()
      .fromRef(_removeAll(reference, string.reference).object);

  static final _set2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Headers_Builder__set2")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Headers$Builder set(java.lang.String string, java.lang.String string1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers_Builder set2(jni.JString string, jni.JString string1) =>
      const $Headers_BuilderType().fromRef(
          _set2(reference, string.reference, string1.reference).object);

  static final _get0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Headers_Builder__get0")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String get(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString get0(jni.JString string) => const jni.JStringType()
      .fromRef(_get0(reference, string.reference).object);

  static final _build = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Headers_Builder__build")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Headers build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers build() => const $HeadersType().fromRef(_build(reference).object);
}

class $Headers_BuilderType extends jni.JObjType<Headers_Builder> {
  const $Headers_BuilderType();

  @override
  String get signature => r"Lokhttp3/Headers$Builder;";

  @override
  Headers_Builder fromRef(jni.JObjectPtr ref) => Headers_Builder.fromRef(ref);
}

extension $Headers_BuilderArray on jni.JArray<Headers_Builder> {
  Headers_Builder operator [](int index) {
    return (elementType as $Headers_BuilderType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, Headers_Builder value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okhttp3.CacheControl
class CacheControl extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  CacheControl.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $CacheControlType();

  static final _get_FORCE_NETWORK =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_CacheControl__FORCE_NETWORK")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final okhttp3.CacheControl FORCE_NETWORK
  /// The returned object must be deleted after use, by calling the `delete` method.
  static CacheControl get FORCE_NETWORK =>
      const $CacheControlType().fromRef(_get_FORCE_NETWORK().object);

  static final _get_FORCE_CACHE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_CacheControl__FORCE_CACHE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final okhttp3.CacheControl FORCE_CACHE
  /// The returned object must be deleted after use, by calling the `delete` method.
  static CacheControl get FORCE_CACHE =>
      const $CacheControlType().fromRef(_get_FORCE_CACHE().object);

  static final _noCache = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("CacheControl__noCache")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean noCache()
  bool noCache() => _noCache(reference).boolean;

  static final _noStore = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("CacheControl__noStore")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean noStore()
  bool noStore() => _noStore(reference).boolean;

  static final _maxAgeSeconds = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("CacheControl__maxAgeSeconds")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int maxAgeSeconds()
  int maxAgeSeconds() => _maxAgeSeconds(reference).integer;

  static final _sMaxAgeSeconds = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("CacheControl__sMaxAgeSeconds")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int sMaxAgeSeconds()
  int sMaxAgeSeconds() => _sMaxAgeSeconds(reference).integer;

  static final _isPrivate = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("CacheControl__isPrivate")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isPrivate()
  bool isPrivate() => _isPrivate(reference).boolean;

  static final _isPublic = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("CacheControl__isPublic")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isPublic()
  bool isPublic() => _isPublic(reference).boolean;

  static final _mustRevalidate = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("CacheControl__mustRevalidate")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean mustRevalidate()
  bool mustRevalidate() => _mustRevalidate(reference).boolean;

  static final _maxStaleSeconds = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("CacheControl__maxStaleSeconds")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int maxStaleSeconds()
  int maxStaleSeconds() => _maxStaleSeconds(reference).integer;

  static final _minFreshSeconds = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("CacheControl__minFreshSeconds")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int minFreshSeconds()
  int minFreshSeconds() => _minFreshSeconds(reference).integer;

  static final _onlyIfCached = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("CacheControl__onlyIfCached")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onlyIfCached()
  bool onlyIfCached() => _onlyIfCached(reference).boolean;

  static final _noTransform = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("CacheControl__noTransform")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean noTransform()
  bool noTransform() => _noTransform(reference).boolean;

  static final _immutable = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("CacheControl__immutable")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean immutable()
  bool immutable() => _immutable(reference).boolean;

  static final _parse = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("CacheControl__parse")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public okhttp3.CacheControl parse(okhttp3.Headers headers)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static CacheControl parse(Headers headers) =>
      const $CacheControlType().fromRef(_parse(headers.reference).object);

  static final _toString1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("CacheControl__toString1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString toString1() =>
      const jni.JStringType().fromRef(_toString1(reference).object);
}

class $CacheControlType extends jni.JObjType<CacheControl> {
  const $CacheControlType();

  @override
  String get signature => r"Lokhttp3/CacheControl;";

  @override
  CacheControl fromRef(jni.JObjectPtr ref) => CacheControl.fromRef(ref);
}

extension $CacheControlArray on jni.JArray<CacheControl> {
  CacheControl operator [](int index) {
    return (elementType as $CacheControlType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, CacheControl value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okhttp3.Request
class Request extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  Request.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $RequestType();

  static final _url = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Request__url")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.HttpUrl url()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject url() => const jni.JObjectType().fromRef(_url(reference).object);

  static final _method = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Request__method")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String method()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString method() =>
      const jni.JStringType().fromRef(_method(reference).object);

  static final _headers = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Request__headers")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Headers headers()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers headers() => const $HeadersType().fromRef(_headers(reference).object);

  static final _header = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Request__header")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String header(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString header(jni.JString string) => const jni.JStringType()
      .fromRef(_header(reference, string.reference).object);

  static final _headers1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Request__headers1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List headers(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  List<jni.JString> headers1(jni.JString string) =>
      const $ListType(jni.JStringType())
          .fromRef(_headers1(reference, string.reference).object);

  static final _body = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Request__body")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.RequestBody body()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RequestBody body() =>
      const $RequestBodyType().fromRef(_body(reference).object);

  static final _tag = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Request__tag")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object tag()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject tag() => const jni.JObjectType().fromRef(_tag(reference).object);

  static final _tag1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Request__tag1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public T tag(java.lang.Class class)
  /// The returned object must be deleted after use, by calling the `delete` method.
  T tag1<T extends jni.JObject>(jni.JObjType<T> $T, jni.JObject class0) =>
      $T.fromRef(_tag1(reference, class0.reference).object);

  static final _newBuilder = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Request__newBuilder")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Request$Builder newBuilder()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder newBuilder() =>
      const $Request_BuilderType().fromRef(_newBuilder(reference).object);

  static final _cacheControl = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Request__cacheControl")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.CacheControl cacheControl()
  /// The returned object must be deleted after use, by calling the `delete` method.
  CacheControl cacheControl() =>
      const $CacheControlType().fromRef(_cacheControl(reference).object);

  static final _isHttps = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Request__isHttps")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isHttps()
  bool isHttps() => _isHttps(reference).boolean;

  static final _toString1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Request__toString1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString toString1() =>
      const jni.JStringType().fromRef(_toString1(reference).object);
}

class $RequestType extends jni.JObjType<Request> {
  const $RequestType();

  @override
  String get signature => r"Lokhttp3/Request;";

  @override
  Request fromRef(jni.JObjectPtr ref) => Request.fromRef(ref);
}

extension $RequestArray on jni.JArray<Request> {
  Request operator [](int index) {
    return (elementType as $RequestType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, Request value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okhttp3.Request$Builder
class Request_Builder extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  Request_Builder.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Request_BuilderType();

  static final _ctor = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "Request_Builder__ctor")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  Request_Builder() : super.fromRef(_ctor().object);

  static final _url = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Request_Builder__url")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Request$Builder url(okhttp3.HttpUrl httpUrl)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder url(jni.JObject httpUrl) => const $Request_BuilderType()
      .fromRef(_url(reference, httpUrl.reference).object);

  static final _url1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Request_Builder__url1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Request$Builder url(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder url1(jni.JString string) => const $Request_BuilderType()
      .fromRef(_url1(reference, string.reference).object);

  static final _url2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Request_Builder__url2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Request$Builder url(java.net.URL uRL)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder url2(jni.JObject uRL) => const $Request_BuilderType()
      .fromRef(_url2(reference, uRL.reference).object);

  static final _header = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Request_Builder__header")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Request$Builder header(java.lang.String string, java.lang.String string1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder header(jni.JString string, jni.JString string1) =>
      const $Request_BuilderType().fromRef(
          _header(reference, string.reference, string1.reference).object);

  static final _addHeader = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Request_Builder__addHeader")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Request$Builder addHeader(java.lang.String string, java.lang.String string1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder addHeader(jni.JString string, jni.JString string1) =>
      const $Request_BuilderType().fromRef(
          _addHeader(reference, string.reference, string1.reference).object);

  static final _removeHeader = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Request_Builder__removeHeader")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Request$Builder removeHeader(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder removeHeader(jni.JString string) =>
      const $Request_BuilderType()
          .fromRef(_removeHeader(reference, string.reference).object);

  static final _headers = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Request_Builder__headers")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Request$Builder headers(okhttp3.Headers headers)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder headers(Headers headers) => const $Request_BuilderType()
      .fromRef(_headers(reference, headers.reference).object);

  static final _cacheControl = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Request_Builder__cacheControl")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Request$Builder cacheControl(okhttp3.CacheControl cacheControl)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder cacheControl(CacheControl cacheControl) =>
      const $Request_BuilderType()
          .fromRef(_cacheControl(reference, cacheControl.reference).object);

  static final _get0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Request_Builder__get0")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Request$Builder get()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder get0() =>
      const $Request_BuilderType().fromRef(_get0(reference).object);

  static final _head = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Request_Builder__head")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Request$Builder head()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder head() =>
      const $Request_BuilderType().fromRef(_head(reference).object);

  static final _post = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Request_Builder__post")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Request$Builder post(okhttp3.RequestBody requestBody)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder post(RequestBody requestBody) => const $Request_BuilderType()
      .fromRef(_post(reference, requestBody.reference).object);

  static final _delete1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Request_Builder__delete1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Request$Builder delete(okhttp3.RequestBody requestBody)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder delete1(RequestBody requestBody) =>
      const $Request_BuilderType()
          .fromRef(_delete1(reference, requestBody.reference).object);

  static final _delete2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Request_Builder__delete2")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Request$Builder delete()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder delete2() =>
      const $Request_BuilderType().fromRef(_delete2(reference).object);

  static final _put = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Request_Builder__put")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Request$Builder put(okhttp3.RequestBody requestBody)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder put(RequestBody requestBody) => const $Request_BuilderType()
      .fromRef(_put(reference, requestBody.reference).object);

  static final _patch = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Request_Builder__patch")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Request$Builder patch(okhttp3.RequestBody requestBody)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder patch(RequestBody requestBody) => const $Request_BuilderType()
      .fromRef(_patch(reference, requestBody.reference).object);

  static final _method = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Request_Builder__method")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Request$Builder method(java.lang.String string, okhttp3.RequestBody requestBody)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder method(jni.JString string, RequestBody requestBody) =>
      const $Request_BuilderType().fromRef(
          _method(reference, string.reference, requestBody.reference).object);

  static final _tag = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Request_Builder__tag")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Request$Builder tag(java.lang.Object object)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder tag(jni.JObject object) => const $Request_BuilderType()
      .fromRef(_tag(reference, object.reference).object);

  static final _tag1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Request_Builder__tag1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Request$Builder tag(java.lang.Class class, T object)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder tag1<T extends jni.JObject>(
          jni.JObjType<T> $T, jni.JObject class0, T object) =>
      const $Request_BuilderType()
          .fromRef(_tag1(reference, class0.reference, object.reference).object);

  static final _build = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Request_Builder__build")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Request build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request build() => const $RequestType().fromRef(_build(reference).object);
}

class $Request_BuilderType extends jni.JObjType<Request_Builder> {
  const $Request_BuilderType();

  @override
  String get signature => r"Lokhttp3/Request$Builder;";

  @override
  Request_Builder fromRef(jni.JObjectPtr ref) => Request_Builder.fromRef(ref);
}

extension $Request_BuilderArray on jni.JArray<Request_Builder> {
  Request_Builder operator [](int index) {
    return (elementType as $Request_BuilderType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, Request_Builder value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okhttp3.RequestBody
class RequestBody extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  RequestBody.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $RequestBodyType();

  static final _ctor = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "RequestBody__ctor")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  RequestBody() : super.fromRef(_ctor().object);

  static final _contentType = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("RequestBody__contentType")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract okhttp3.MediaType contentType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject contentType() =>
      const jni.JObjectType().fromRef(_contentType(reference).object);

  static final _contentLength = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("RequestBody__contentLength")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long contentLength()
  int contentLength() => _contentLength(reference).long;

  static final _writeTo = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("RequestBody__writeTo")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void writeTo(okio.BufferedSink bufferedSink)
  void writeTo(jni.JObject bufferedSink) =>
      _writeTo(reference, bufferedSink.reference).check();

  static final _isDuplex = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("RequestBody__isDuplex")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isDuplex()
  bool isDuplex() => _isDuplex(reference).boolean;

  static final _isOneShot = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("RequestBody__isOneShot")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isOneShot()
  bool isOneShot() => _isOneShot(reference).boolean;

  static final _create = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("RequestBody__create")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public okhttp3.RequestBody create(okhttp3.MediaType mediaType, java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static RequestBody create(jni.JObject mediaType, jni.JString string) =>
      const $RequestBodyType()
          .fromRef(_create(mediaType.reference, string.reference).object);

  static final _create1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("RequestBody__create1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public okhttp3.RequestBody create(okhttp3.MediaType mediaType, okio.ByteString byteString)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static RequestBody create1(jni.JObject mediaType, jni.JObject byteString) =>
      const $RequestBodyType()
          .fromRef(_create1(mediaType.reference, byteString.reference).object);

  static final _create2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("RequestBody__create2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public okhttp3.RequestBody create(okhttp3.MediaType mediaType, byte[] bs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static RequestBody create2(jni.JObject mediaType, jni.JArray<jni.JByte> bs) =>
      const $RequestBodyType()
          .fromRef(_create2(mediaType.reference, bs.reference).object);

  static final _create3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32)>>("RequestBody__create3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: static public okhttp3.RequestBody create(okhttp3.MediaType mediaType, byte[] bs, int i, int i1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static RequestBody create3(
          jni.JObject mediaType, jni.JArray<jni.JByte> bs, int i, int i1) =>
      const $RequestBodyType()
          .fromRef(_create3(mediaType.reference, bs.reference, i, i1).object);

  static final _create4 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("RequestBody__create4")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public okhttp3.RequestBody create(okhttp3.MediaType mediaType, java.io.File file)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static RequestBody create4(jni.JObject mediaType, jni.JObject file) =>
      const $RequestBodyType()
          .fromRef(_create4(mediaType.reference, file.reference).object);
}

class $RequestBodyType extends jni.JObjType<RequestBody> {
  const $RequestBodyType();

  @override
  String get signature => r"Lokhttp3/RequestBody;";

  @override
  RequestBody fromRef(jni.JObjectPtr ref) => RequestBody.fromRef(ref);
}

extension $RequestBodyArray on jni.JArray<RequestBody> {
  RequestBody operator [](int index) {
    return (elementType as $RequestBodyType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, RequestBody value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okhttp3.Response
class Response extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  Response.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $ResponseType();

  static final _request = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Response__request")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Request request()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request request() => const $RequestType().fromRef(_request(reference).object);

  static final _protocol = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Response__protocol")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Protocol protocol()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject protocol() =>
      const jni.JObjectType().fromRef(_protocol(reference).object);

  static final _code = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Response__code")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int code()
  int code() => _code(reference).integer;

  static final _isSuccessful = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Response__isSuccessful")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isSuccessful()
  bool isSuccessful() => _isSuccessful(reference).boolean;

  static final _message = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Response__message")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String message()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString message() =>
      const jni.JStringType().fromRef(_message(reference).object);

  static final _handshake = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Response__handshake")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Handshake handshake()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject handshake() =>
      const jni.JObjectType().fromRef(_handshake(reference).object);

  static final _headers = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Response__headers")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List headers(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  List<jni.JString> headers(jni.JString string) =>
      const $ListType(jni.JStringType())
          .fromRef(_headers(reference, string.reference).object);

  static final _header = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Response__header")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String header(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString header(jni.JString string) => const jni.JStringType()
      .fromRef(_header(reference, string.reference).object);

  static final _header1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Response__header1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String header(java.lang.String string, java.lang.String string1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString header1(jni.JString string, jni.JString string1) =>
      const jni.JStringType().fromRef(
          _header1(reference, string.reference, string1.reference).object);

  static final _headers1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Response__headers1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Headers headers()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers headers1() =>
      const $HeadersType().fromRef(_headers1(reference).object);

  static final _trailers = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Response__trailers")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Headers trailers()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers trailers() =>
      const $HeadersType().fromRef(_trailers(reference).object);

  static final _peekBody = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("Response__peekBody")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public okhttp3.ResponseBody peekBody(long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ResponseBody peekBody(int j) =>
      const $ResponseBodyType().fromRef(_peekBody(reference, j).object);

  static final _body = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Response__body")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.ResponseBody body()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ResponseBody body() =>
      const $ResponseBodyType().fromRef(_body(reference).object);

  static final _newBuilder = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Response__newBuilder")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Response$Builder newBuilder()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject newBuilder() =>
      const jni.JObjectType().fromRef(_newBuilder(reference).object);

  static final _isRedirect = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Response__isRedirect")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isRedirect()
  bool isRedirect() => _isRedirect(reference).boolean;

  static final _networkResponse = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Response__networkResponse")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Response networkResponse()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Response networkResponse() =>
      const $ResponseType().fromRef(_networkResponse(reference).object);

  static final _cacheResponse = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Response__cacheResponse")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Response cacheResponse()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Response cacheResponse() =>
      const $ResponseType().fromRef(_cacheResponse(reference).object);

  static final _priorResponse = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Response__priorResponse")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.Response priorResponse()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Response priorResponse() =>
      const $ResponseType().fromRef(_priorResponse(reference).object);

  static final _challenges = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Response__challenges")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List challenges()
  /// The returned object must be deleted after use, by calling the `delete` method.
  List<jni.JObject> challenges() =>
      const $ListType(jni.JObjectType()).fromRef(_challenges(reference).object);

  static final _cacheControl = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Response__cacheControl")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okhttp3.CacheControl cacheControl()
  /// The returned object must be deleted after use, by calling the `delete` method.
  CacheControl cacheControl() =>
      const $CacheControlType().fromRef(_cacheControl(reference).object);

  static final _sentRequestAtMillis = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Response__sentRequestAtMillis")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long sentRequestAtMillis()
  int sentRequestAtMillis() => _sentRequestAtMillis(reference).long;

  static final _receivedResponseAtMillis = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Response__receivedResponseAtMillis")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long receivedResponseAtMillis()
  int receivedResponseAtMillis() => _receivedResponseAtMillis(reference).long;

  static final _close = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Response__close")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void close()
  void close() => _close(reference).check();

  static final _toString1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Response__toString1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString toString1() =>
      const jni.JStringType().fromRef(_toString1(reference).object);
}

class $ResponseType extends jni.JObjType<Response> {
  const $ResponseType();

  @override
  String get signature => r"Lokhttp3/Response;";

  @override
  Response fromRef(jni.JObjectPtr ref) => Response.fromRef(ref);
}

extension $ResponseArray on jni.JArray<Response> {
  Response operator [](int index) {
    return (elementType as $ResponseType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, Response value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okhttp3.ResponseBody
class ResponseBody extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  ResponseBody.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $ResponseBodyType();

  static final _ctor = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "ResponseBody__ctor")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  ResponseBody() : super.fromRef(_ctor().object);

  static final _contentType = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("ResponseBody__contentType")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract okhttp3.MediaType contentType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject contentType() =>
      const jni.JObjectType().fromRef(_contentType(reference).object);

  static final _contentLength = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("ResponseBody__contentLength")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract long contentLength()
  int contentLength() => _contentLength(reference).long;

  static final _byteStream = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("ResponseBody__byteStream")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final java.io.InputStream byteStream()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject byteStream() =>
      const jni.JObjectType().fromRef(_byteStream(reference).object);

  static final _source = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("ResponseBody__source")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract okio.BufferedSource source()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject source() =>
      const jni.JObjectType().fromRef(_source(reference).object);

  static final _bytes = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("ResponseBody__bytes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final byte[] bytes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.JByte> bytes() =>
      const jni.JArrayType(jni.JByteType()).fromRef(_bytes(reference).object);

  static final _charStream = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("ResponseBody__charStream")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final java.io.Reader charStream()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject charStream() =>
      const jni.JObjectType().fromRef(_charStream(reference).object);

  static final _string = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("ResponseBody__string")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.String string()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString string() =>
      const jni.JStringType().fromRef(_string(reference).object);

  static final _close = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("ResponseBody__close")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void close()
  void close() => _close(reference).check();

  static final _create = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ResponseBody__create")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public okhttp3.ResponseBody create(okhttp3.MediaType mediaType, java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static ResponseBody create(jni.JObject mediaType, jni.JString string) =>
      const $ResponseBodyType()
          .fromRef(_create(mediaType.reference, string.reference).object);

  static final _create1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ResponseBody__create1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public okhttp3.ResponseBody create(okhttp3.MediaType mediaType, byte[] bs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static ResponseBody create1(
          jni.JObject mediaType, jni.JArray<jni.JByte> bs) =>
      const $ResponseBodyType()
          .fromRef(_create1(mediaType.reference, bs.reference).object);

  static final _create2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ResponseBody__create2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public okhttp3.ResponseBody create(okhttp3.MediaType mediaType, okio.ByteString byteString)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static ResponseBody create2(jni.JObject mediaType, jni.JObject byteString) =>
      const $ResponseBodyType()
          .fromRef(_create2(mediaType.reference, byteString.reference).object);

  static final _create3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("ResponseBody__create3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public okhttp3.ResponseBody create(okhttp3.MediaType mediaType, long j, okio.BufferedSource bufferedSource)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static ResponseBody create3(
          jni.JObject mediaType, int j, jni.JObject bufferedSource) =>
      const $ResponseBodyType().fromRef(
          _create3(mediaType.reference, j, bufferedSource.reference).object);
}

class $ResponseBodyType extends jni.JObjType<ResponseBody> {
  const $ResponseBodyType();

  @override
  String get signature => r"Lokhttp3/ResponseBody;";

  @override
  ResponseBody fromRef(jni.JObjectPtr ref) => ResponseBody.fromRef(ref);
}

extension $ResponseBodyArray on jni.JArray<ResponseBody> {
  ResponseBody operator [](int index) {
    return (elementType as $ResponseBodyType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, ResponseBody value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okhttp3.Interceptor
class Interceptor extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  Interceptor.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $InterceptorType();

  static final _intercept = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Interceptor__intercept")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract okhttp3.Response intercept(okhttp3.Interceptor$Chain chain)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Response intercept(jni.JObject chain) => const $ResponseType()
      .fromRef(_intercept(reference, chain.reference).object);
}

class $InterceptorType extends jni.JObjType<Interceptor> {
  const $InterceptorType();

  @override
  String get signature => r"Lokhttp3/Interceptor;";

  @override
  Interceptor fromRef(jni.JObjectPtr ref) => Interceptor.fromRef(ref);
}

extension $InterceptorArray on jni.JArray<Interceptor> {
  Interceptor operator [](int index) {
    return (elementType as $InterceptorType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, Interceptor value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okio.Timeout
class Timeout extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  Timeout.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $TimeoutType();

  static final _get_NONE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Timeout__NONE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final okio.Timeout NONE
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Timeout get NONE => const $TimeoutType().fromRef(_get_NONE().object);

  static final _ctor =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("Timeout__ctor")
          .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  Timeout() : super.fromRef(_ctor().object);

  static final _timeout = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("Timeout__timeout")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public okio.Timeout timeout(long j, java.util.concurrent.TimeUnit timeUnit)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Timeout timeout(int j, TimeUnit timeUnit) => const $TimeoutType()
      .fromRef(_timeout(reference, j, timeUnit.reference).object);

  static final _timeoutNanos = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Timeout__timeoutNanos")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long timeoutNanos()
  int timeoutNanos() => _timeoutNanos(reference).long;

  static final _hasDeadline = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Timeout__hasDeadline")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean hasDeadline()
  bool hasDeadline() => _hasDeadline(reference).boolean;

  static final _deadlineNanoTime = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Timeout__deadlineNanoTime")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long deadlineNanoTime()
  int deadlineNanoTime() => _deadlineNanoTime(reference).long;

  static final _deadlineNanoTime1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int64)>>("Timeout__deadlineNanoTime1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public okio.Timeout deadlineNanoTime(long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Timeout deadlineNanoTime1(int j) =>
      const $TimeoutType().fromRef(_deadlineNanoTime1(reference, j).object);

  static final _deadline = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("Timeout__deadline")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public final okio.Timeout deadline(long j, java.util.concurrent.TimeUnit timeUnit)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Timeout deadline(int j, TimeUnit timeUnit) => const $TimeoutType()
      .fromRef(_deadline(reference, j, timeUnit.reference).object);

  static final _clearTimeout = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Timeout__clearTimeout")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okio.Timeout clearTimeout()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Timeout clearTimeout() =>
      const $TimeoutType().fromRef(_clearTimeout(reference).object);

  static final _clearDeadline = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Timeout__clearDeadline")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public okio.Timeout clearDeadline()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Timeout clearDeadline() =>
      const $TimeoutType().fromRef(_clearDeadline(reference).object);

  static final _throwIfReached = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Timeout__throwIfReached")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void throwIfReached()
  void throwIfReached() => _throwIfReached(reference).check();

  static final _waitUntilNotified = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Timeout__waitUntilNotified")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final void waitUntilNotified(java.lang.Object object)
  void waitUntilNotified(jni.JObject object) =>
      _waitUntilNotified(reference, object.reference).check();
}

class $TimeoutType extends jni.JObjType<Timeout> {
  const $TimeoutType();

  @override
  String get signature => r"Lokio/Timeout;";

  @override
  Timeout fromRef(jni.JObjectPtr ref) => Timeout.fromRef(ref);
}

extension $TimeoutArray on jni.JArray<Timeout> {
  Timeout operator [](int index) {
    return (elementType as $TimeoutType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, Timeout value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: java.util.List
class List<E extends jni.JObject> extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type(
        $E,
      );

  final jni.JObjType<E> $E;

  List.fromRef(
    this.$E,
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static $ListType<E> type<E extends jni.JObject>(
    jni.JObjType<E> $E,
  ) {
    return $ListType(
      $E,
    );
  }

  static final _size = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("List__size")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int size()
  int size() => _size(reference).integer;

  static final _isEmpty = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("List__isEmpty")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean isEmpty()
  bool isEmpty() => _isEmpty(reference).boolean;

  static final _contains = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("List__contains")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean contains(java.lang.Object object)
  bool contains(jni.JObject object) =>
      _contains(reference, object.reference).boolean;

  static final _iterator = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("List__iterator")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.util.Iterator iterator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject iterator() =>
      const jni.JObjectType().fromRef(_iterator(reference).object);

  static final _toArray = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("List__toArray")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object[] toArray()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.JObject> toArray() => const jni.JArrayType(jni.JObjectType())
      .fromRef(_toArray(reference).object);

  static final _toArray1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("List__toArray1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object[] toArray(java.lang.Object[] objects)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<T> toArray1<T extends jni.JObject>(
          jni.JObjType<T> $T, jni.JArray<T> objects) =>
      jni.JArrayType($T)
          .fromRef(_toArray1(reference, objects.reference).object);

  static final _add = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("List__add")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean add(E object)
  bool add(E object) => _add(reference, object.reference).boolean;

  static final _remove = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("List__remove")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean remove(java.lang.Object object)
  bool remove(jni.JObject object) =>
      _remove(reference, object.reference).boolean;

  static final _containsAll = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("List__containsAll")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean containsAll(java.util.Collection collection)
  bool containsAll(jni.JObject collection) =>
      _containsAll(reference, collection.reference).boolean;

  static final _addAll = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("List__addAll")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean addAll(java.util.Collection collection)
  bool addAll(jni.JObject collection) =>
      _addAll(reference, collection.reference).boolean;

  static final _addAll1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("List__addAll1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean addAll(int i, java.util.Collection collection)
  bool addAll1(int i, jni.JObject collection) =>
      _addAll1(reference, i, collection.reference).boolean;

  static final _removeAll = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("List__removeAll")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean removeAll(java.util.Collection collection)
  bool removeAll(jni.JObject collection) =>
      _removeAll(reference, collection.reference).boolean;

  static final _retainAll = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("List__retainAll")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean retainAll(java.util.Collection collection)
  bool retainAll(jni.JObject collection) =>
      _retainAll(reference, collection.reference).boolean;

  static final _replaceAll = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("List__replaceAll")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void replaceAll(java.util.function.UnaryOperator unaryOperator)
  void replaceAll(jni.JObject unaryOperator) =>
      _replaceAll(reference, unaryOperator.reference).check();

  static final _sort = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("List__sort")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void sort(java.util.Comparator comparator)
  void sort(jni.JObject comparator) =>
      _sort(reference, comparator.reference).check();

  static final _clear = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("List__clear")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void clear()
  void clear() => _clear(reference).check();

  static final _equals1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("List__equals1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean equals(java.lang.Object object)
  bool equals1(jni.JObject object) =>
      _equals1(reference, object.reference).boolean;

  static final _hashCode1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("List__hashCode1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int hashCode()
  int hashCode1() => _hashCode1(reference).integer;

  static final _get0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("List__get0")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract E get(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  E get0(int i) => $E.fromRef(_get0(reference, i).object);

  static final _set0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("List__set0")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract E set(int i, E object)
  /// The returned object must be deleted after use, by calling the `delete` method.
  E set0(int i, E object) =>
      $E.fromRef(_set0(reference, i, object.reference).object);

  static final _add1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("List__add1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void add(int i, E object)
  void add1(int i, E object) => _add1(reference, i, object.reference).check();

  static final _remove1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("List__remove1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract E remove(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  E remove1(int i) => $E.fromRef(_remove1(reference, i).object);

  static final _indexOf = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("List__indexOf")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int indexOf(java.lang.Object object)
  int indexOf(jni.JObject object) =>
      _indexOf(reference, object.reference).integer;

  static final _lastIndexOf = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("List__lastIndexOf")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int lastIndexOf(java.lang.Object object)
  int lastIndexOf(jni.JObject object) =>
      _lastIndexOf(reference, object.reference).integer;

  static final _listIterator = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("List__listIterator")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.util.ListIterator listIterator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject listIterator() =>
      const jni.JObjectType().fromRef(_listIterator(reference).object);

  static final _listIterator1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("List__listIterator1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract java.util.ListIterator listIterator(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject listIterator1(int i) =>
      const jni.JObjectType().fromRef(_listIterator1(reference, i).object);

  static final _subList = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32)>>("List__subList")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public abstract java.util.List subList(int i, int i1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  List<E> subList(int i, int i1) =>
      $ListType($E).fromRef(_subList(reference, i, i1).object);

  static final _spliterator = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("List__spliterator")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Spliterator spliterator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject spliterator() =>
      const jni.JObjectType().fromRef(_spliterator(reference).object);

  static final _of =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("List__of")
          .asFunction<jni.JniResult Function()>();

  /// from: static public java.util.List of()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static List<E> of<E extends jni.JObject>(jni.JObjType<E> $E) =>
      $ListType($E).fromRef(_of().object);

  static final _of1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("List__of1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.List of(E object)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static List<E> of1<E extends jni.JObject>(jni.JObjType<E> $E, E object) =>
      $ListType($E).fromRef(_of1(object.reference).object);

  static final _of2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("List__of2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.List of(E object, E object1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static List<E> of2<E extends jni.JObject>(
          jni.JObjType<E> $E, E object, E object1) =>
      $ListType($E).fromRef(_of2(object.reference, object1.reference).object);

  static final _of3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("List__of3")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.List of(E object, E object1, E object2)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static List<E> of3<E extends jni.JObject>(
          jni.JObjType<E> $E, E object, E object1, E object2) =>
      $ListType($E).fromRef(
          _of3(object.reference, object1.reference, object2.reference).object);

  static final _of4 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("List__of4")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.List of(E object, E object1, E object2, E object3)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static List<E> of4<E extends jni.JObject>(
          jni.JObjType<E> $E, E object, E object1, E object2, E object3) =>
      $ListType($E).fromRef(_of4(object.reference, object1.reference,
              object2.reference, object3.reference)
          .object);

  static final _of5 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("List__of5")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.List of(E object, E object1, E object2, E object3, E object4)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static List<E> of5<E extends jni.JObject>(jni.JObjType<E> $E, E object,
          E object1, E object2, E object3, E object4) =>
      $ListType($E).fromRef(_of5(object.reference, object1.reference,
              object2.reference, object3.reference, object4.reference)
          .object);

  static final _of6 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("List__of6")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.List of(E object, E object1, E object2, E object3, E object4, E object5)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static List<E> of6<E extends jni.JObject>(jni.JObjType<E> $E, E object,
          E object1, E object2, E object3, E object4, E object5) =>
      $ListType($E).fromRef(_of6(
              object.reference,
              object1.reference,
              object2.reference,
              object3.reference,
              object4.reference,
              object5.reference)
          .object);

  static final _of7 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("List__of7")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.List of(E object, E object1, E object2, E object3, E object4, E object5, E object6)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static List<E> of7<E extends jni.JObject>(jni.JObjType<E> $E, E object,
          E object1, E object2, E object3, E object4, E object5, E object6) =>
      $ListType($E).fromRef(_of7(
              object.reference,
              object1.reference,
              object2.reference,
              object3.reference,
              object4.reference,
              object5.reference,
              object6.reference)
          .object);

  static final _of8 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("List__of8")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.List of(E object, E object1, E object2, E object3, E object4, E object5, E object6, E object7)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static List<E> of8<E extends jni.JObject>(
          jni.JObjType<E> $E,
          E object,
          E object1,
          E object2,
          E object3,
          E object4,
          E object5,
          E object6,
          E object7) =>
      $ListType($E).fromRef(_of8(
              object.reference,
              object1.reference,
              object2.reference,
              object3.reference,
              object4.reference,
              object5.reference,
              object6.reference,
              object7.reference)
          .object);

  static final _of9 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("List__of9")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.List of(E object, E object1, E object2, E object3, E object4, E object5, E object6, E object7, E object8)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static List<E> of9<E extends jni.JObject>(
          jni.JObjType<E> $E,
          E object,
          E object1,
          E object2,
          E object3,
          E object4,
          E object5,
          E object6,
          E object7,
          E object8) =>
      $ListType($E).fromRef(_of9(
              object.reference,
              object1.reference,
              object2.reference,
              object3.reference,
              object4.reference,
              object5.reference,
              object6.reference,
              object7.reference,
              object8.reference)
          .object);

  static final _of10 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("List__of10")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.List of(E object, E object1, E object2, E object3, E object4, E object5, E object6, E object7, E object8, E object9)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static List<E> of10<E extends jni.JObject>(
          jni.JObjType<E> $E,
          E object,
          E object1,
          E object2,
          E object3,
          E object4,
          E object5,
          E object6,
          E object7,
          E object8,
          E object9) =>
      $ListType($E).fromRef(_of10(
              object.reference,
              object1.reference,
              object2.reference,
              object3.reference,
              object4.reference,
              object5.reference,
              object6.reference,
              object7.reference,
              object8.reference,
              object9.reference)
          .object);

  static final _of11 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("List__of11")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.List of(java.lang.Object[] objects)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static List<E> of11<E extends jni.JObject>(
          jni.JObjType<E> $E, jni.JArray<E> objects) =>
      $ListType($E).fromRef(_of11(objects.reference).object);

  static final _copyOf = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("List__copyOf")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.List copyOf(java.util.Collection collection)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static List<E> copyOf<E extends jni.JObject>(
          jni.JObjType<E> $E, jni.JObject collection) =>
      $ListType($E).fromRef(_copyOf(collection.reference).object);
}

class $ListType<E extends jni.JObject> extends jni.JObjType<List<E>> {
  final jni.JObjType<E> $E;

  const $ListType(
    this.$E,
  );

  @override
  String get signature => r"Ljava/util/List;";

  @override
  List<E> fromRef(jni.JObjectPtr ref) => List.fromRef($E, ref);
}

extension $ListArray<E extends jni.JObject> on jni.JArray<List<E>> {
  List<E> operator [](int index) {
    return (elementType as $ListType<E>)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, List<E> value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: java.util.Map
class Map<K extends jni.JObject, V extends jni.JObject> extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type(
        $K,
        $V,
      );

  final jni.JObjType<K> $K;
  final jni.JObjType<V> $V;

  Map.fromRef(
    this.$K,
    this.$V,
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static $MapType<K, V> type<K extends jni.JObject, V extends jni.JObject>(
    jni.JObjType<K> $K,
    jni.JObjType<V> $V,
  ) {
    return $MapType(
      $K,
      $V,
    );
  }

  static final _size = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Map__size")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int size()
  int size() => _size(reference).integer;

  static final _isEmpty = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Map__isEmpty")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean isEmpty()
  bool isEmpty() => _isEmpty(reference).boolean;

  static final _containsKey = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Map__containsKey")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean containsKey(java.lang.Object object)
  bool containsKey(jni.JObject object) =>
      _containsKey(reference, object.reference).boolean;

  static final _containsValue = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Map__containsValue")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean containsValue(java.lang.Object object)
  bool containsValue(jni.JObject object) =>
      _containsValue(reference, object.reference).boolean;

  static final _get0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("Map__get0")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract V get(java.lang.Object object)
  /// The returned object must be deleted after use, by calling the `delete` method.
  V get0(jni.JObject object) =>
      $V.fromRef(_get0(reference, object.reference).object);

  static final _put = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("Map__put")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract V put(K object, V object1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  V put(K object, V object1) =>
      $V.fromRef(_put(reference, object.reference, object1.reference).object);

  static final _remove = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("Map__remove")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract V remove(java.lang.Object object)
  /// The returned object must be deleted after use, by calling the `delete` method.
  V remove(jni.JObject object) =>
      $V.fromRef(_remove(reference, object.reference).object);

  static final _putAll = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("Map__putAll")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void putAll(java.util.Map map)
  void putAll(Map<K, V> map) => _putAll(reference, map.reference).check();

  static final _clear = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Map__clear")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void clear()
  void clear() => _clear(reference).check();

  static final _keySet = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Map__keySet")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.util.Set keySet()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Set<K> keySet() => $SetType($K).fromRef(_keySet(reference).object);

  static final _values = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Map__values")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.util.Collection values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject values() =>
      const jni.JObjectType().fromRef(_values(reference).object);

  static final _entrySet = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Map__entrySet")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.util.Set entrySet()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Set<jni.JObject> entrySet() =>
      const $SetType(jni.JObjectType()).fromRef(_entrySet(reference).object);

  static final _equals1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Map__equals1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean equals(java.lang.Object object)
  bool equals1(jni.JObject object) =>
      _equals1(reference, object.reference).boolean;

  static final _hashCode1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Map__hashCode1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int hashCode()
  int hashCode1() => _hashCode1(reference).integer;

  static final _getOrDefault = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Map__getOrDefault")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public V getOrDefault(java.lang.Object object, V object1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  V getOrDefault(jni.JObject object, V object1) => $V.fromRef(
      _getOrDefault(reference, object.reference, object1.reference).object);

  static final _forEach = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Map__forEach")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void forEach(java.util.function.BiConsumer biConsumer)
  void forEach(jni.JObject biConsumer) =>
      _forEach(reference, biConsumer.reference).check();

  static final _replaceAll = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Map__replaceAll")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void replaceAll(java.util.function.BiFunction biFunction)
  void replaceAll(jni.JObject biFunction) =>
      _replaceAll(reference, biFunction.reference).check();

  static final _putIfAbsent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Map__putIfAbsent")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public V putIfAbsent(K object, V object1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  V putIfAbsent(K object, V object1) => $V.fromRef(
      _putIfAbsent(reference, object.reference, object1.reference).object);

  static final _remove1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Map__remove1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean remove(java.lang.Object object, java.lang.Object object1)
  bool remove1(jni.JObject object, jni.JObject object1) =>
      _remove1(reference, object.reference, object1.reference).boolean;

  static final _replace = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Map__replace")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean replace(K object, V object1, V object2)
  bool replace(K object, V object1, V object2) => _replace(
          reference, object.reference, object1.reference, object2.reference)
      .boolean;

  static final _replace1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Map__replace1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public V replace(K object, V object1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  V replace1(K object, V object1) => $V.fromRef(
      _replace1(reference, object.reference, object1.reference).object);

  static final _computeIfAbsent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Map__computeIfAbsent")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public V computeIfAbsent(K object, java.util.function.Function function)
  /// The returned object must be deleted after use, by calling the `delete` method.
  V computeIfAbsent(K object, jni.JObject function) => $V.fromRef(
      _computeIfAbsent(reference, object.reference, function.reference).object);

  static final _computeIfPresent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Map__computeIfPresent")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public V computeIfPresent(K object, java.util.function.BiFunction biFunction)
  /// The returned object must be deleted after use, by calling the `delete` method.
  V computeIfPresent(K object, jni.JObject biFunction) => $V.fromRef(
      _computeIfPresent(reference, object.reference, biFunction.reference)
          .object);

  static final _compute = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Map__compute")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public V compute(K object, java.util.function.BiFunction biFunction)
  /// The returned object must be deleted after use, by calling the `delete` method.
  V compute(K object, jni.JObject biFunction) => $V.fromRef(
      _compute(reference, object.reference, biFunction.reference).object);

  static final _merge = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Map__merge")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public V merge(K object, V object1, java.util.function.BiFunction biFunction)
  /// The returned object must be deleted after use, by calling the `delete` method.
  V merge(K object, V object1, jni.JObject biFunction) => $V.fromRef(_merge(
          reference, object.reference, object1.reference, biFunction.reference)
      .object);

  static final _of =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("Map__of")
          .asFunction<jni.JniResult Function()>();

  /// from: static public java.util.Map of()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Map<K, V> of<K extends jni.JObject, V extends jni.JObject>(
          jni.JObjType<K> $K, jni.JObjType<V> $V) =>
      $MapType($K, $V).fromRef(_of().object);

  static final _of1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("Map__of1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Map of(K object, V object1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Map<K, V> of1<K extends jni.JObject, V extends jni.JObject>(
          jni.JObjType<K> $K, jni.JObjType<V> $V, K object, V object1) =>
      $MapType($K, $V)
          .fromRef(_of1(object.reference, object1.reference).object);

  static final _of2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Map__of2")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Map of(K object, V object1, K object2, V object3)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Map<K, V> of2<K extends jni.JObject, V extends jni.JObject>(
          jni.JObjType<K> $K,
          jni.JObjType<V> $V,
          K object,
          V object1,
          K object2,
          V object3) =>
      $MapType($K, $V).fromRef(_of2(object.reference, object1.reference,
              object2.reference, object3.reference)
          .object);

  static final _of3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Map__of3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Map of(K object, V object1, K object2, V object3, K object4, V object5)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Map<K, V> of3<K extends jni.JObject, V extends jni.JObject>(
          jni.JObjType<K> $K,
          jni.JObjType<V> $V,
          K object,
          V object1,
          K object2,
          V object3,
          K object4,
          V object5) =>
      $MapType($K, $V).fromRef(_of3(
              object.reference,
              object1.reference,
              object2.reference,
              object3.reference,
              object4.reference,
              object5.reference)
          .object);

  static final _of4 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Map__of4")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Map of(K object, V object1, K object2, V object3, K object4, V object5, K object6, V object7)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Map<K, V> of4<K extends jni.JObject, V extends jni.JObject>(
          jni.JObjType<K> $K,
          jni.JObjType<V> $V,
          K object,
          V object1,
          K object2,
          V object3,
          K object4,
          V object5,
          K object6,
          V object7) =>
      $MapType($K, $V).fromRef(_of4(
              object.reference,
              object1.reference,
              object2.reference,
              object3.reference,
              object4.reference,
              object5.reference,
              object6.reference,
              object7.reference)
          .object);

  static final _of5 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Map__of5")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Map of(K object, V object1, K object2, V object3, K object4, V object5, K object6, V object7, K object8, V object9)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Map<K, V> of5<K extends jni.JObject, V extends jni.JObject>(
          jni.JObjType<K> $K,
          jni.JObjType<V> $V,
          K object,
          V object1,
          K object2,
          V object3,
          K object4,
          V object5,
          K object6,
          V object7,
          K object8,
          V object9) =>
      $MapType($K, $V).fromRef(_of5(
              object.reference,
              object1.reference,
              object2.reference,
              object3.reference,
              object4.reference,
              object5.reference,
              object6.reference,
              object7.reference,
              object8.reference,
              object9.reference)
          .object);

  static final _of6 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Map__of6")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Map of(K object, V object1, K object2, V object3, K object4, V object5, K object6, V object7, K object8, V object9, K object10, V object11)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Map<K, V> of6<K extends jni.JObject, V extends jni.JObject>(
          jni.JObjType<K> $K,
          jni.JObjType<V> $V,
          K object,
          V object1,
          K object2,
          V object3,
          K object4,
          V object5,
          K object6,
          V object7,
          K object8,
          V object9,
          K object10,
          V object11) =>
      $MapType($K, $V).fromRef(_of6(
              object.reference,
              object1.reference,
              object2.reference,
              object3.reference,
              object4.reference,
              object5.reference,
              object6.reference,
              object7.reference,
              object8.reference,
              object9.reference,
              object10.reference,
              object11.reference)
          .object);

  static final _of7 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Map__of7")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Map of(K object, V object1, K object2, V object3, K object4, V object5, K object6, V object7, K object8, V object9, K object10, V object11, K object12, V object13)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Map<K, V> of7<K extends jni.JObject, V extends jni.JObject>(
          jni.JObjType<K> $K,
          jni.JObjType<V> $V,
          K object,
          V object1,
          K object2,
          V object3,
          K object4,
          V object5,
          K object6,
          V object7,
          K object8,
          V object9,
          K object10,
          V object11,
          K object12,
          V object13) =>
      $MapType($K, $V).fromRef(_of7(
              object.reference,
              object1.reference,
              object2.reference,
              object3.reference,
              object4.reference,
              object5.reference,
              object6.reference,
              object7.reference,
              object8.reference,
              object9.reference,
              object10.reference,
              object11.reference,
              object12.reference,
              object13.reference)
          .object);

  static final _of8 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Map__of8")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Map of(K object, V object1, K object2, V object3, K object4, V object5, K object6, V object7, K object8, V object9, K object10, V object11, K object12, V object13, K object14, V object15)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Map<K, V> of8<K extends jni.JObject, V extends jni.JObject>(
          jni.JObjType<K> $K,
          jni.JObjType<V> $V,
          K object,
          V object1,
          K object2,
          V object3,
          K object4,
          V object5,
          K object6,
          V object7,
          K object8,
          V object9,
          K object10,
          V object11,
          K object12,
          V object13,
          K object14,
          V object15) =>
      $MapType($K, $V).fromRef(_of8(
              object.reference,
              object1.reference,
              object2.reference,
              object3.reference,
              object4.reference,
              object5.reference,
              object6.reference,
              object7.reference,
              object8.reference,
              object9.reference,
              object10.reference,
              object11.reference,
              object12.reference,
              object13.reference,
              object14.reference,
              object15.reference)
          .object);

  static final _of9 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Map__of9")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Map of(K object, V object1, K object2, V object3, K object4, V object5, K object6, V object7, K object8, V object9, K object10, V object11, K object12, V object13, K object14, V object15, K object16, V object17)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Map<K, V> of9<K extends jni.JObject, V extends jni.JObject>(
          jni.JObjType<K> $K,
          jni.JObjType<V> $V,
          K object,
          V object1,
          K object2,
          V object3,
          K object4,
          V object5,
          K object6,
          V object7,
          K object8,
          V object9,
          K object10,
          V object11,
          K object12,
          V object13,
          K object14,
          V object15,
          K object16,
          V object17) =>
      $MapType($K, $V).fromRef(_of9(
              object.reference,
              object1.reference,
              object2.reference,
              object3.reference,
              object4.reference,
              object5.reference,
              object6.reference,
              object7.reference,
              object8.reference,
              object9.reference,
              object10.reference,
              object11.reference,
              object12.reference,
              object13.reference,
              object14.reference,
              object15.reference,
              object16.reference,
              object17.reference)
          .object);

  static final _of10 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Map__of10")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Map of(K object, V object1, K object2, V object3, K object4, V object5, K object6, V object7, K object8, V object9, K object10, V object11, K object12, V object13, K object14, V object15, K object16, V object17, K object18, V object19)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Map<K, V> of10<K extends jni.JObject, V extends jni.JObject>(
          jni.JObjType<K> $K,
          jni.JObjType<V> $V,
          K object,
          V object1,
          K object2,
          V object3,
          K object4,
          V object5,
          K object6,
          V object7,
          K object8,
          V object9,
          K object10,
          V object11,
          K object12,
          V object13,
          K object14,
          V object15,
          K object16,
          V object17,
          K object18,
          V object19) =>
      $MapType($K, $V).fromRef(_of10(
              object.reference,
              object1.reference,
              object2.reference,
              object3.reference,
              object4.reference,
              object5.reference,
              object6.reference,
              object7.reference,
              object8.reference,
              object9.reference,
              object10.reference,
              object11.reference,
              object12.reference,
              object13.reference,
              object14.reference,
              object15.reference,
              object16.reference,
              object17.reference,
              object18.reference,
              object19.reference)
          .object);

  static final _ofEntries = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Map__ofEntries")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Map ofEntries(java.lang.Object[] entrys)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Map<K, V> ofEntries<K extends jni.JObject, V extends jni.JObject>(
          jni.JObjType<K> $K,
          jni.JObjType<V> $V,
          jni.JArray<jni.JObject> entrys) =>
      $MapType($K, $V).fromRef(_ofEntries(entrys.reference).object);

  static final _entry = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("Map__entry")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Map$Entry entry(K object, V object1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject entry<K extends jni.JObject, V extends jni.JObject>(
          jni.JObjType<K> $K, jni.JObjType<V> $V, K object, V object1) =>
      const jni.JObjectType()
          .fromRef(_entry(object.reference, object1.reference).object);

  static final _copyOf = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Map__copyOf")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Map copyOf(java.util.Map map)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Map<K, V> copyOf<K extends jni.JObject, V extends jni.JObject>(
          jni.JObjType<K> $K, jni.JObjType<V> $V, Map<K, V> map) =>
      $MapType($K, $V).fromRef(_copyOf(map.reference).object);
}

class $MapType<K extends jni.JObject, V extends jni.JObject>
    extends jni.JObjType<Map<K, V>> {
  final jni.JObjType<K> $K;
  final jni.JObjType<V> $V;

  const $MapType(
    this.$K,
    this.$V,
  );

  @override
  String get signature => r"Ljava/util/Map;";

  @override
  Map<K, V> fromRef(jni.JObjectPtr ref) => Map.fromRef($K, $V, ref);
}

extension $MapArray<K extends jni.JObject, V extends jni.JObject>
    on jni.JArray<Map<K, V>> {
  Map<K, V> operator [](int index) {
    return (elementType as $MapType<K, V>)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, Map<K, V> value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: java.util.Set
class Set<E extends jni.JObject> extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type(
        $E,
      );

  final jni.JObjType<E> $E;

  Set.fromRef(
    this.$E,
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static $SetType<E> type<E extends jni.JObject>(
    jni.JObjType<E> $E,
  ) {
    return $SetType(
      $E,
    );
  }

  static final _size = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Set__size")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int size()
  int size() => _size(reference).integer;

  static final _isEmpty = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Set__isEmpty")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean isEmpty()
  bool isEmpty() => _isEmpty(reference).boolean;

  static final _contains = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__contains")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean contains(java.lang.Object object)
  bool contains(jni.JObject object) =>
      _contains(reference, object.reference).boolean;

  static final _iterator = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Set__iterator")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.util.Iterator iterator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject iterator() =>
      const jni.JObjectType().fromRef(_iterator(reference).object);

  static final _toArray = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Set__toArray")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object[] toArray()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.JObject> toArray() => const jni.JArrayType(jni.JObjectType())
      .fromRef(_toArray(reference).object);

  static final _toArray1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__toArray1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object[] toArray(java.lang.Object[] objects)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<T> toArray1<T extends jni.JObject>(
          jni.JObjType<T> $T, jni.JArray<T> objects) =>
      jni.JArrayType($T)
          .fromRef(_toArray1(reference, objects.reference).object);

  static final _add = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("Set__add")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean add(E object)
  bool add(E object) => _add(reference, object.reference).boolean;

  static final _remove = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("Set__remove")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean remove(java.lang.Object object)
  bool remove(jni.JObject object) =>
      _remove(reference, object.reference).boolean;

  static final _containsAll = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__containsAll")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean containsAll(java.util.Collection collection)
  bool containsAll(jni.JObject collection) =>
      _containsAll(reference, collection.reference).boolean;

  static final _addAll = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("Set__addAll")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean addAll(java.util.Collection collection)
  bool addAll(jni.JObject collection) =>
      _addAll(reference, collection.reference).boolean;

  static final _retainAll = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__retainAll")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean retainAll(java.util.Collection collection)
  bool retainAll(jni.JObject collection) =>
      _retainAll(reference, collection.reference).boolean;

  static final _removeAll = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__removeAll")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean removeAll(java.util.Collection collection)
  bool removeAll(jni.JObject collection) =>
      _removeAll(reference, collection.reference).boolean;

  static final _clear = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Set__clear")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void clear()
  void clear() => _clear(reference).check();

  static final _equals1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__equals1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean equals(java.lang.Object object)
  bool equals1(jni.JObject object) =>
      _equals1(reference, object.reference).boolean;

  static final _hashCode1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Set__hashCode1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int hashCode()
  int hashCode1() => _hashCode1(reference).integer;

  static final _spliterator = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Set__spliterator")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Spliterator spliterator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject spliterator() =>
      const jni.JObjectType().fromRef(_spliterator(reference).object);

  static final _of =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("Set__of")
          .asFunction<jni.JniResult Function()>();

  /// from: static public java.util.Set of()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of<E extends jni.JObject>(jni.JObjType<E> $E) =>
      $SetType($E).fromRef(_of().object);

  static final _of1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Set__of1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set of(E object)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of1<E extends jni.JObject>(jni.JObjType<E> $E, E object) =>
      $SetType($E).fromRef(_of1(object.reference).object);

  static final _of2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("Set__of2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set of(E object, E object1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of2<E extends jni.JObject>(
          jni.JObjType<E> $E, E object, E object1) =>
      $SetType($E).fromRef(_of2(object.reference, object1.reference).object);

  static final _of3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("Set__of3")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set of(E object, E object1, E object2)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of3<E extends jni.JObject>(
          jni.JObjType<E> $E, E object, E object1, E object2) =>
      $SetType($E).fromRef(
          _of3(object.reference, object1.reference, object2.reference).object);

  static final _of4 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__of4")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set of(E object, E object1, E object2, E object3)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of4<E extends jni.JObject>(
          jni.JObjType<E> $E, E object, E object1, E object2, E object3) =>
      $SetType($E).fromRef(_of4(object.reference, object1.reference,
              object2.reference, object3.reference)
          .object);

  static final _of5 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__of5")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set of(E object, E object1, E object2, E object3, E object4)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of5<E extends jni.JObject>(jni.JObjType<E> $E, E object,
          E object1, E object2, E object3, E object4) =>
      $SetType($E).fromRef(_of5(object.reference, object1.reference,
              object2.reference, object3.reference, object4.reference)
          .object);

  static final _of6 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__of6")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set of(E object, E object1, E object2, E object3, E object4, E object5)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of6<E extends jni.JObject>(jni.JObjType<E> $E, E object,
          E object1, E object2, E object3, E object4, E object5) =>
      $SetType($E).fromRef(_of6(
              object.reference,
              object1.reference,
              object2.reference,
              object3.reference,
              object4.reference,
              object5.reference)
          .object);

  static final _of7 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__of7")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set of(E object, E object1, E object2, E object3, E object4, E object5, E object6)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of7<E extends jni.JObject>(jni.JObjType<E> $E, E object,
          E object1, E object2, E object3, E object4, E object5, E object6) =>
      $SetType($E).fromRef(_of7(
              object.reference,
              object1.reference,
              object2.reference,
              object3.reference,
              object4.reference,
              object5.reference,
              object6.reference)
          .object);

  static final _of8 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__of8")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set of(E object, E object1, E object2, E object3, E object4, E object5, E object6, E object7)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of8<E extends jni.JObject>(
          jni.JObjType<E> $E,
          E object,
          E object1,
          E object2,
          E object3,
          E object4,
          E object5,
          E object6,
          E object7) =>
      $SetType($E).fromRef(_of8(
              object.reference,
              object1.reference,
              object2.reference,
              object3.reference,
              object4.reference,
              object5.reference,
              object6.reference,
              object7.reference)
          .object);

  static final _of9 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__of9")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set of(E object, E object1, E object2, E object3, E object4, E object5, E object6, E object7, E object8)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of9<E extends jni.JObject>(
          jni.JObjType<E> $E,
          E object,
          E object1,
          E object2,
          E object3,
          E object4,
          E object5,
          E object6,
          E object7,
          E object8) =>
      $SetType($E).fromRef(_of9(
              object.reference,
              object1.reference,
              object2.reference,
              object3.reference,
              object4.reference,
              object5.reference,
              object6.reference,
              object7.reference,
              object8.reference)
          .object);

  static final _of10 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Set__of10")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set of(E object, E object1, E object2, E object3, E object4, E object5, E object6, E object7, E object8, E object9)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of10<E extends jni.JObject>(
          jni.JObjType<E> $E,
          E object,
          E object1,
          E object2,
          E object3,
          E object4,
          E object5,
          E object6,
          E object7,
          E object8,
          E object9) =>
      $SetType($E).fromRef(_of10(
              object.reference,
              object1.reference,
              object2.reference,
              object3.reference,
              object4.reference,
              object5.reference,
              object6.reference,
              object7.reference,
              object8.reference,
              object9.reference)
          .object);

  static final _of11 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Set__of11")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set of(java.lang.Object[] objects)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> of11<E extends jni.JObject>(
          jni.JObjType<E> $E, jni.JArray<E> objects) =>
      $SetType($E).fromRef(_of11(objects.reference).object);

  static final _copyOf = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Set__copyOf")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Set copyOf(java.util.Collection collection)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Set<E> copyOf<E extends jni.JObject>(
          jni.JObjType<E> $E, jni.JObject collection) =>
      $SetType($E).fromRef(_copyOf(collection.reference).object);
}

class $SetType<E extends jni.JObject> extends jni.JObjType<Set<E>> {
  final jni.JObjType<E> $E;

  const $SetType(
    this.$E,
  );

  @override
  String get signature => r"Ljava/util/Set;";

  @override
  Set<E> fromRef(jni.JObjectPtr ref) => Set.fromRef($E, ref);
}

extension $SetArray<E extends jni.JObject> on jni.JArray<Set<E>> {
  Set<E> operator [](int index) {
    return (elementType as $SetType<E>)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, Set<E> value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: java.util.Date
class Date extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  Date.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $DateType();

  static final _ctor =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("Date__ctor")
          .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  Date() : super.fromRef(_ctor().object);

  static final _ctor1 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int64)>>(
              "Date__ctor1")
          .asFunction<jni.JniResult Function(int)>();

  /// from: public void <init>(long j)
  Date.ctor1(int j) : super.fromRef(_ctor1(j).object);

  static final _ctor2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Int32, ffi.Int32, ffi.Int32)>>("Date__ctor2")
      .asFunction<jni.JniResult Function(int, int, int)>();

  /// from: public void <init>(int i, int i1, int i2)
  Date.ctor2(int i, int i1, int i2) : super.fromRef(_ctor2(i, i1, i2).object);

  static final _ctor3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32,
                  ffi.Int32)>>("Date__ctor3")
      .asFunction<jni.JniResult Function(int, int, int, int, int)>();

  /// from: public void <init>(int i, int i1, int i2, int i3, int i4)
  Date.ctor3(int i, int i1, int i2, int i3, int i4)
      : super.fromRef(_ctor3(i, i1, i2, i3, i4).object);

  static final _ctor4 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32,
                  ffi.Int32, ffi.Int32)>>("Date__ctor4")
      .asFunction<jni.JniResult Function(int, int, int, int, int, int)>();

  /// from: public void <init>(int i, int i1, int i2, int i3, int i4, int i5)
  Date.ctor4(int i, int i1, int i2, int i3, int i4, int i5)
      : super.fromRef(_ctor4(i, i1, i2, i3, i4, i5).object);

  static final _ctor5 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Date__ctor5")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string)
  Date.ctor5(jni.JString string)
      : super.fromRef(_ctor5(string.reference).object);

  static final _clone = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Date__clone")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject clone() =>
      const jni.JObjectType().fromRef(_clone(reference).object);

  static final _UTC = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32,
                  ffi.Int32, ffi.Int32)>>("Date__UTC")
      .asFunction<jni.JniResult Function(int, int, int, int, int, int)>();

  /// from: static public long UTC(int i, int i1, int i2, int i3, int i4, int i5)
  static int UTC(int i, int i1, int i2, int i3, int i4, int i5) =>
      _UTC(i, i1, i2, i3, i4, i5).long;

  static final _parse = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Date__parse")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public long parse(java.lang.String string)
  static int parse(jni.JString string) => _parse(string.reference).long;

  static final _getYear = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Date__getYear")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getYear()
  int getYear() => _getYear(reference).integer;

  static final _setYear = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Date__setYear")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setYear(int i)
  void setYear(int i) => _setYear(reference, i).check();

  static final _getMonth = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Date__getMonth")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getMonth()
  int getMonth() => _getMonth(reference).integer;

  static final _setMonth = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Date__setMonth")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setMonth(int i)
  void setMonth(int i) => _setMonth(reference, i).check();

  static final _getDate = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Date__getDate")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getDate()
  int getDate() => _getDate(reference).integer;

  static final _setDate = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Date__setDate")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setDate(int i)
  void setDate(int i) => _setDate(reference, i).check();

  static final _getDay = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Date__getDay")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getDay()
  int getDay() => _getDay(reference).integer;

  static final _getHours = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Date__getHours")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getHours()
  int getHours() => _getHours(reference).integer;

  static final _setHours = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Date__setHours")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setHours(int i)
  void setHours(int i) => _setHours(reference, i).check();

  static final _getMinutes = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Date__getMinutes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getMinutes()
  int getMinutes() => _getMinutes(reference).integer;

  static final _setMinutes = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Date__setMinutes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setMinutes(int i)
  void setMinutes(int i) => _setMinutes(reference, i).check();

  static final _getSeconds = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Date__getSeconds")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getSeconds()
  int getSeconds() => _getSeconds(reference).integer;

  static final _setSeconds = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Date__setSeconds")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setSeconds(int i)
  void setSeconds(int i) => _setSeconds(reference, i).check();

  static final _getTime = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Date__getTime")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getTime()
  int getTime() => _getTime(reference).long;

  static final _setTime = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("Date__setTime")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setTime(long j)
  void setTime(int j) => _setTime(reference, j).check();

  static final _before = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Date__before")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean before(java.util.Date date)
  bool before(Date date) => _before(reference, date.reference).boolean;

  static final _after = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("Date__after")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean after(java.util.Date date)
  bool after(Date date) => _after(reference, date.reference).boolean;

  static final _equals1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Date__equals1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals1(jni.JObject object) =>
      _equals1(reference, object.reference).boolean;

  static final _compareTo = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Date__compareTo")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int compareTo(java.util.Date date)
  int compareTo(Date date) => _compareTo(reference, date.reference).integer;

  static final _hashCode1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Date__hashCode1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode1() => _hashCode1(reference).integer;

  static final _toString1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Date__toString1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString toString1() =>
      const jni.JStringType().fromRef(_toString1(reference).object);

  static final _toLocaleString = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Date__toLocaleString")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toLocaleString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString toLocaleString() =>
      const jni.JStringType().fromRef(_toLocaleString(reference).object);

  static final _toGMTString = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Date__toGMTString")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toGMTString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString toGMTString() =>
      const jni.JStringType().fromRef(_toGMTString(reference).object);

  static final _getTimezoneOffset = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Date__getTimezoneOffset")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getTimezoneOffset()
  int getTimezoneOffset() => _getTimezoneOffset(reference).integer;

  static final _from = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Date__from")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Date from(java.time.Instant instant)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Date from(jni.JObject instant) =>
      const $DateType().fromRef(_from(instant.reference).object);

  static final _toInstant = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Date__toInstant")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant toInstant()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject toInstant() =>
      const jni.JObjectType().fromRef(_toInstant(reference).object);

  static final _compareTo1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Date__compareTo1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int compareTo(java.lang.Object object)
  int compareTo1(jni.JObject object) =>
      _compareTo1(reference, object.reference).integer;
}

class $DateType extends jni.JObjType<Date> {
  const $DateType();

  @override
  String get signature => r"Ljava/util/Date;";

  @override
  Date fromRef(jni.JObjectPtr ref) => Date.fromRef(ref);
}

extension $DateArray on jni.JArray<Date> {
  Date operator [](int index) {
    return (elementType as $DateType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, Date value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: java.util.concurrent.TimeUnit
class TimeUnit extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  TimeUnit.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $TimeUnitType();

  static final _get_NANOSECONDS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_TimeUnit__NANOSECONDS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.util.concurrent.TimeUnit NANOSECONDS
  /// The returned object must be deleted after use, by calling the `delete` method.
  static TimeUnit get NANOSECONDS =>
      const $TimeUnitType().fromRef(_get_NANOSECONDS().object);

  static final _get_MICROSECONDS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_TimeUnit__MICROSECONDS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.util.concurrent.TimeUnit MICROSECONDS
  /// The returned object must be deleted after use, by calling the `delete` method.
  static TimeUnit get MICROSECONDS =>
      const $TimeUnitType().fromRef(_get_MICROSECONDS().object);

  static final _get_MILLISECONDS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_TimeUnit__MILLISECONDS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.util.concurrent.TimeUnit MILLISECONDS
  /// The returned object must be deleted after use, by calling the `delete` method.
  static TimeUnit get MILLISECONDS =>
      const $TimeUnitType().fromRef(_get_MILLISECONDS().object);

  static final _get_SECONDS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_TimeUnit__SECONDS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.util.concurrent.TimeUnit SECONDS
  /// The returned object must be deleted after use, by calling the `delete` method.
  static TimeUnit get SECONDS =>
      const $TimeUnitType().fromRef(_get_SECONDS().object);

  static final _get_MINUTES =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_TimeUnit__MINUTES")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.util.concurrent.TimeUnit MINUTES
  /// The returned object must be deleted after use, by calling the `delete` method.
  static TimeUnit get MINUTES =>
      const $TimeUnitType().fromRef(_get_MINUTES().object);

  static final _get_HOURS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_TimeUnit__HOURS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.util.concurrent.TimeUnit HOURS
  /// The returned object must be deleted after use, by calling the `delete` method.
  static TimeUnit get HOURS =>
      const $TimeUnitType().fromRef(_get_HOURS().object);

  static final _get_DAYS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_TimeUnit__DAYS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.util.concurrent.TimeUnit DAYS
  /// The returned object must be deleted after use, by calling the `delete` method.
  static TimeUnit get DAYS => const $TimeUnitType().fromRef(_get_DAYS().object);

  static final _values =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "TimeUnit__values")
          .asFunction<jni.JniResult Function()>();

  /// from: static public java.util.concurrent.TimeUnit[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JArray<TimeUnit> values() =>
      const jni.JArrayType($TimeUnitType()).fromRef(_values().object);

  static final _valueOf = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("TimeUnit__valueOf")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.TimeUnit valueOf(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static TimeUnit valueOf(jni.JString string) =>
      const $TimeUnitType().fromRef(_valueOf(string.reference).object);

  static final _convert = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("TimeUnit__convert")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public long convert(long j, java.util.concurrent.TimeUnit timeUnit)
  int convert(int j, TimeUnit timeUnit) =>
      _convert(reference, j, timeUnit.reference).long;

  static final _convert1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("TimeUnit__convert1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public long convert(java.time.Duration duration)
  int convert1(jni.JObject duration) =>
      _convert1(reference, duration.reference).long;

  static final _toNanos = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("TimeUnit__toNanos")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public long toNanos(long j)
  int toNanos(int j) => _toNanos(reference, j).long;

  static final _toMicros = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("TimeUnit__toMicros")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public long toMicros(long j)
  int toMicros(int j) => _toMicros(reference, j).long;

  static final _toMillis = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("TimeUnit__toMillis")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public long toMillis(long j)
  int toMillis(int j) => _toMillis(reference, j).long;

  static final _toSeconds = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("TimeUnit__toSeconds")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public long toSeconds(long j)
  int toSeconds(int j) => _toSeconds(reference, j).long;

  static final _toMinutes = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("TimeUnit__toMinutes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public long toMinutes(long j)
  int toMinutes(int j) => _toMinutes(reference, j).long;

  static final _toHours = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("TimeUnit__toHours")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public long toHours(long j)
  int toHours(int j) => _toHours(reference, j).long;

  static final _toDays = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("TimeUnit__toDays")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public long toDays(long j)
  int toDays(int j) => _toDays(reference, j).long;

  static final _timedWait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("TimeUnit__timedWait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void timedWait(java.lang.Object object, long j)
  void timedWait(jni.JObject object, int j) =>
      _timedWait(reference, object.reference, j).check();

  static final _timedJoin = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("TimeUnit__timedJoin")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void timedJoin(java.lang.Thread thread, long j)
  void timedJoin(jni.JObject thread, int j) =>
      _timedJoin(reference, thread.reference, j).check();

  static final _sleep = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("TimeUnit__sleep")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void sleep(long j)
  void sleep(int j) => _sleep(reference, j).check();

  static final _toChronoUnit = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("TimeUnit__toChronoUnit")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.temporal.ChronoUnit toChronoUnit()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject toChronoUnit() =>
      const jni.JObjectType().fromRef(_toChronoUnit(reference).object);

  static final _of = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("TimeUnit__of")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.TimeUnit of(java.time.temporal.ChronoUnit chronoUnit)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static TimeUnit of(jni.JObject chronoUnit) =>
      const $TimeUnitType().fromRef(_of(chronoUnit.reference).object);
}

class $TimeUnitType extends jni.JObjType<TimeUnit> {
  const $TimeUnitType();

  @override
  String get signature => r"Ljava/util/concurrent/TimeUnit;";

  @override
  TimeUnit fromRef(jni.JObjectPtr ref) => TimeUnit.fromRef(ref);
}

extension $TimeUnitArray on jni.JArray<TimeUnit> {
  TimeUnit operator [](int index) {
    return (elementType as $TimeUnitType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, TimeUnit value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}
