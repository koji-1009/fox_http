// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;

import "package:jni/jni.dart" as jni;

import "package:jni/internal_helpers_for_jnigen.dart";

final jniEnv = jni.Jni.env;
final jniAccessors = jni.Jni.accessors;

/// from: okhttp3.OkHttpClient
class OkHttpClient extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  OkHttpClient.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors.getClassOf("okhttp3/OkHttpClient");

  /// The type which includes information such as the signature of this class.
  static const type = $OkHttpClientType();

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_callTimeoutMillis =
      jniAccessors.getMethodIDOf(_classRef, "callTimeoutMillis", "()I");

  /// from: public int callTimeoutMillis()
  int callTimeoutMillis() => jniAccessors.callMethodWithArgs(
      reference, _id_callTimeoutMillis, jni.JniCallType.intType, []).integer;

  static final _id_connectTimeoutMillis =
      jniAccessors.getMethodIDOf(_classRef, "connectTimeoutMillis", "()I");

  /// from: public int connectTimeoutMillis()
  int connectTimeoutMillis() => jniAccessors.callMethodWithArgs(
      reference, _id_connectTimeoutMillis, jni.JniCallType.intType, []).integer;

  static final _id_readTimeoutMillis =
      jniAccessors.getMethodIDOf(_classRef, "readTimeoutMillis", "()I");

  /// from: public int readTimeoutMillis()
  int readTimeoutMillis() => jniAccessors.callMethodWithArgs(
      reference, _id_readTimeoutMillis, jni.JniCallType.intType, []).integer;

  static final _id_writeTimeoutMillis =
      jniAccessors.getMethodIDOf(_classRef, "writeTimeoutMillis", "()I");

  /// from: public int writeTimeoutMillis()
  int writeTimeoutMillis() => jniAccessors.callMethodWithArgs(
      reference, _id_writeTimeoutMillis, jni.JniCallType.intType, []).integer;

  static final _id_pingIntervalMillis =
      jniAccessors.getMethodIDOf(_classRef, "pingIntervalMillis", "()I");

  /// from: public int pingIntervalMillis()
  int pingIntervalMillis() => jniAccessors.callMethodWithArgs(
      reference, _id_pingIntervalMillis, jni.JniCallType.intType, []).integer;

  static final _id_proxy =
      jniAccessors.getMethodIDOf(_classRef, "proxy", "()Ljava/net/Proxy;");

  /// from: public java.net.Proxy proxy()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject proxy() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_proxy, jni.JniCallType.objectType, []).object);

  static final _id_proxySelector = jniAccessors.getMethodIDOf(
      _classRef, "proxySelector", "()Ljava/net/ProxySelector;");

  /// from: public java.net.ProxySelector proxySelector()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject proxySelector() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_proxySelector, jni.JniCallType.objectType, []).object);

  static final _id_cookieJar = jniAccessors.getMethodIDOf(
      _classRef, "cookieJar", "()Lokhttp3/CookieJar;");

  /// from: public okhttp3.CookieJar cookieJar()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject cookieJar() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_cookieJar, jni.JniCallType.objectType, []).object);

  static final _id_cache =
      jniAccessors.getMethodIDOf(_classRef, "cache", "()Lokhttp3/Cache;");

  /// from: public okhttp3.Cache cache()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject cache() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_cache, jni.JniCallType.objectType, []).object);

  static final _id_dns =
      jniAccessors.getMethodIDOf(_classRef, "dns", "()Lokhttp3/Dns;");

  /// from: public okhttp3.Dns dns()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject dns() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_dns, jni.JniCallType.objectType, []).object);

  static final _id_socketFactory = jniAccessors.getMethodIDOf(
      _classRef, "socketFactory", "()Ljavax/net/SocketFactory;");

  /// from: public javax.net.SocketFactory socketFactory()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject socketFactory() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_socketFactory, jni.JniCallType.objectType, []).object);

  static final _id_sslSocketFactory = jniAccessors.getMethodIDOf(
      _classRef, "sslSocketFactory", "()Ljavax/net/ssl/SSLSocketFactory;");

  /// from: public javax.net.ssl.SSLSocketFactory sslSocketFactory()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject sslSocketFactory() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_sslSocketFactory, jni.JniCallType.objectType, []).object);

  static final _id_hostnameVerifier = jniAccessors.getMethodIDOf(
      _classRef, "hostnameVerifier", "()Ljavax/net/ssl/HostnameVerifier;");

  /// from: public javax.net.ssl.HostnameVerifier hostnameVerifier()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject hostnameVerifier() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_hostnameVerifier, jni.JniCallType.objectType, []).object);

  static final _id_certificatePinner = jniAccessors.getMethodIDOf(
      _classRef, "certificatePinner", "()Lokhttp3/CertificatePinner;");

  /// from: public okhttp3.CertificatePinner certificatePinner()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject certificatePinner() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_certificatePinner, jni.JniCallType.objectType, []).object);

  static final _id_authenticator = jniAccessors.getMethodIDOf(
      _classRef, "authenticator", "()Lokhttp3/Authenticator;");

  /// from: public okhttp3.Authenticator authenticator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject authenticator() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_authenticator, jni.JniCallType.objectType, []).object);

  static final _id_proxyAuthenticator = jniAccessors.getMethodIDOf(
      _classRef, "proxyAuthenticator", "()Lokhttp3/Authenticator;");

  /// from: public okhttp3.Authenticator proxyAuthenticator()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject proxyAuthenticator() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_proxyAuthenticator, jni.JniCallType.objectType, []).object);

  static final _id_connectionPool = jniAccessors.getMethodIDOf(
      _classRef, "connectionPool", "()Lokhttp3/ConnectionPool;");

  /// from: public okhttp3.ConnectionPool connectionPool()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject connectionPool() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_connectionPool, jni.JniCallType.objectType, []).object);

  static final _id_followSslRedirects =
      jniAccessors.getMethodIDOf(_classRef, "followSslRedirects", "()Z");

  /// from: public boolean followSslRedirects()
  bool followSslRedirects() => jniAccessors.callMethodWithArgs(reference,
      _id_followSslRedirects, jni.JniCallType.booleanType, []).boolean;

  static final _id_followRedirects =
      jniAccessors.getMethodIDOf(_classRef, "followRedirects", "()Z");

  /// from: public boolean followRedirects()
  bool followRedirects() => jniAccessors.callMethodWithArgs(
      reference, _id_followRedirects, jni.JniCallType.booleanType, []).boolean;

  static final _id_retryOnConnectionFailure =
      jniAccessors.getMethodIDOf(_classRef, "retryOnConnectionFailure", "()Z");

  /// from: public boolean retryOnConnectionFailure()
  bool retryOnConnectionFailure() => jniAccessors.callMethodWithArgs(reference,
      _id_retryOnConnectionFailure, jni.JniCallType.booleanType, []).boolean;

  static final _id_dispatcher = jniAccessors.getMethodIDOf(
      _classRef, "dispatcher", "()Lokhttp3/Dispatcher;");

  /// from: public okhttp3.Dispatcher dispatcher()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject dispatcher() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_dispatcher, jni.JniCallType.objectType, []).object);

  static final _id_protocols =
      jniAccessors.getMethodIDOf(_classRef, "protocols", "()Ljava/util/List;");

  /// from: public java.util.List protocols()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject protocols() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_protocols, jni.JniCallType.objectType, []).object);

  static final _id_connectionSpecs = jniAccessors.getMethodIDOf(
      _classRef, "connectionSpecs", "()Ljava/util/List;");

  /// from: public java.util.List connectionSpecs()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject connectionSpecs() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_connectionSpecs, jni.JniCallType.objectType, []).object);

  static final _id_interceptors = jniAccessors.getMethodIDOf(
      _classRef, "interceptors", "()Ljava/util/List;");

  /// from: public java.util.List interceptors()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject interceptors() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_interceptors, jni.JniCallType.objectType, []).object);

  static final _id_networkInterceptors = jniAccessors.getMethodIDOf(
      _classRef, "networkInterceptors", "()Ljava/util/List;");

  /// from: public java.util.List networkInterceptors()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject networkInterceptors() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_networkInterceptors, jni.JniCallType.objectType, []).object);

  static final _id_eventListenerFactory = jniAccessors.getMethodIDOf(
      _classRef, "eventListenerFactory", "()Lokhttp3/EventListener\$Factory;");

  /// from: public okhttp3.EventListener$Factory eventListenerFactory()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject eventListenerFactory() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_eventListenerFactory, jni.JniCallType.objectType, []).object);

  static final _id_newCall = jniAccessors.getMethodIDOf(
      _classRef, "newCall", "(Lokhttp3/Request;)Lokhttp3/Call;");

  /// from: public okhttp3.Call newCall(okhttp3.Request request)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Call newCall(Request request) =>
      const $CallType().fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_newCall, jni.JniCallType.objectType, [request.reference]).object);

  static final _id_newWebSocket = jniAccessors.getMethodIDOf(
      _classRef,
      "newWebSocket",
      "(Lokhttp3/Request;Lokhttp3/WebSocketListener;)Lokhttp3/WebSocket;");

  /// from: public okhttp3.WebSocket newWebSocket(okhttp3.Request request, okhttp3.WebSocketListener webSocketListener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject newWebSocket(Request request, jni.JObject webSocketListener) =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_newWebSocket,
          jni.JniCallType.objectType,
          [request.reference, webSocketListener.reference]).object);

  static final _id_newBuilder = jniAccessors.getMethodIDOf(
      _classRef, "newBuilder", "()Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder newBuilder()
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder newBuilder() =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_newBuilder, jni.JniCallType.objectType, []).object);
}

class $OkHttpClientType extends jni.JObjType<OkHttpClient> {
  const $OkHttpClientType();

  @override
  String get signature => r"Lokhttp3/OkHttpClient;";

  @override
  OkHttpClient fromRef(jni.JObjectPtr ref) => OkHttpClient.fromRef(ref);
}

extension $OkHttpClientArray on jni.JArray<OkHttpClient> {
  OkHttpClient operator [](int index) {
    return (elementType as $OkHttpClientType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, OkHttpClient value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okhttp3.OkHttpClient$Builder
class OkHttpClient_Builder extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  OkHttpClient_Builder.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef =
      jniAccessors.getClassOf("okhttp3/OkHttpClient\$Builder");

  /// The type which includes information such as the signature of this class.
  static const type = $OkHttpClient_BuilderType();

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_callTimeout = jniAccessors.getMethodIDOf(
      _classRef,
      "callTimeout",
      "(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder callTimeout(long j, java.util.concurrent.TimeUnit timeUnit)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder callTimeout(int j, jni.JObject timeUnit) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_callTimeout,
          jni.JniCallType.objectType,
          [j, timeUnit.reference]).object);

  static final _id_callTimeout1 = jniAccessors.getMethodIDOf(_classRef,
      "callTimeout", "(Ljava/time/Duration;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder callTimeout(java.time.Duration duration)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder callTimeout1(jni.JObject duration) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_callTimeout1,
          jni.JniCallType.objectType,
          [duration.reference]).object);

  static final _id_connectTimeout = jniAccessors.getMethodIDOf(
      _classRef,
      "connectTimeout",
      "(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder connectTimeout(long j, java.util.concurrent.TimeUnit timeUnit)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder connectTimeout(int j, jni.JObject timeUnit) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_connectTimeout,
          jni.JniCallType.objectType,
          [j, timeUnit.reference]).object);

  static final _id_connectTimeout1 = jniAccessors.getMethodIDOf(
      _classRef,
      "connectTimeout",
      "(Ljava/time/Duration;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder connectTimeout(java.time.Duration duration)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder connectTimeout1(jni.JObject duration) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_connectTimeout1,
          jni.JniCallType.objectType,
          [duration.reference]).object);

  static final _id_readTimeout = jniAccessors.getMethodIDOf(
      _classRef,
      "readTimeout",
      "(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder readTimeout(long j, java.util.concurrent.TimeUnit timeUnit)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder readTimeout(int j, jni.JObject timeUnit) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_readTimeout,
          jni.JniCallType.objectType,
          [j, timeUnit.reference]).object);

  static final _id_readTimeout1 = jniAccessors.getMethodIDOf(_classRef,
      "readTimeout", "(Ljava/time/Duration;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder readTimeout(java.time.Duration duration)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder readTimeout1(jni.JObject duration) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_readTimeout1,
          jni.JniCallType.objectType,
          [duration.reference]).object);

  static final _id_writeTimeout = jniAccessors.getMethodIDOf(
      _classRef,
      "writeTimeout",
      "(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder writeTimeout(long j, java.util.concurrent.TimeUnit timeUnit)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder writeTimeout(int j, jni.JObject timeUnit) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_writeTimeout,
          jni.JniCallType.objectType,
          [j, timeUnit.reference]).object);

  static final _id_writeTimeout1 = jniAccessors.getMethodIDOf(_classRef,
      "writeTimeout", "(Ljava/time/Duration;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder writeTimeout(java.time.Duration duration)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder writeTimeout1(jni.JObject duration) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_writeTimeout1,
          jni.JniCallType.objectType,
          [duration.reference]).object);

  static final _id_pingInterval = jniAccessors.getMethodIDOf(
      _classRef,
      "pingInterval",
      "(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder pingInterval(long j, java.util.concurrent.TimeUnit timeUnit)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder pingInterval(int j, jni.JObject timeUnit) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_pingInterval,
          jni.JniCallType.objectType,
          [j, timeUnit.reference]).object);

  static final _id_pingInterval1 = jniAccessors.getMethodIDOf(_classRef,
      "pingInterval", "(Ljava/time/Duration;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder pingInterval(java.time.Duration duration)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder pingInterval1(jni.JObject duration) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_pingInterval1,
          jni.JniCallType.objectType,
          [duration.reference]).object);

  static final _id_proxy = jniAccessors.getMethodIDOf(
      _classRef, "proxy", "(Ljava/net/Proxy;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder proxy(java.net.Proxy proxy)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder proxy(jni.JObject proxy) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_proxy,
          jni.JniCallType.objectType,
          [proxy.reference]).object);

  static final _id_proxySelector = jniAccessors.getMethodIDOf(
      _classRef,
      "proxySelector",
      "(Ljava/net/ProxySelector;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder proxySelector(java.net.ProxySelector proxySelector)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder proxySelector(jni.JObject proxySelector) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_proxySelector,
          jni.JniCallType.objectType,
          [proxySelector.reference]).object);

  static final _id_cookieJar = jniAccessors.getMethodIDOf(_classRef,
      "cookieJar", "(Lokhttp3/CookieJar;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder cookieJar(okhttp3.CookieJar cookieJar)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder cookieJar(jni.JObject cookieJar) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_cookieJar,
          jni.JniCallType.objectType,
          [cookieJar.reference]).object);

  static final _id_cache = jniAccessors.getMethodIDOf(
      _classRef, "cache", "(Lokhttp3/Cache;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder cache(okhttp3.Cache cache)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder cache(jni.JObject cache) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_cache,
          jni.JniCallType.objectType,
          [cache.reference]).object);

  static final _id_dns = jniAccessors.getMethodIDOf(
      _classRef, "dns", "(Lokhttp3/Dns;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder dns(okhttp3.Dns dns)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder dns(jni.JObject dns) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_dns,
          jni.JniCallType.objectType,
          [dns.reference]).object);

  static final _id_socketFactory = jniAccessors.getMethodIDOf(
      _classRef,
      "socketFactory",
      "(Ljavax/net/SocketFactory;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder socketFactory(javax.net.SocketFactory socketFactory)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder socketFactory(jni.JObject socketFactory) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_socketFactory,
          jni.JniCallType.objectType,
          [socketFactory.reference]).object);

  static final _id_sslSocketFactory = jniAccessors.getMethodIDOf(
      _classRef,
      "sslSocketFactory",
      "(Ljavax/net/ssl/SSLSocketFactory;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory sSLSocketFactory)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder sslSocketFactory(jni.JObject sSLSocketFactory) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_sslSocketFactory,
          jni.JniCallType.objectType,
          [sSLSocketFactory.reference]).object);

  static final _id_sslSocketFactory1 = jniAccessors.getMethodIDOf(
      _classRef,
      "sslSocketFactory",
      "(Ljavax/net/ssl/SSLSocketFactory;Ljavax/net/ssl/X509TrustManager;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory sSLSocketFactory, javax.net.ssl.X509TrustManager x509TrustManager)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder sslSocketFactory1(
          jni.JObject sSLSocketFactory, jni.JObject x509TrustManager) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_sslSocketFactory1,
          jni.JniCallType.objectType,
          [sSLSocketFactory.reference, x509TrustManager.reference]).object);

  static final _id_hostnameVerifier = jniAccessors.getMethodIDOf(
      _classRef,
      "hostnameVerifier",
      "(Ljavax/net/ssl/HostnameVerifier;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder hostnameVerifier(javax.net.ssl.HostnameVerifier hostnameVerifier)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder hostnameVerifier(jni.JObject hostnameVerifier) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_hostnameVerifier,
          jni.JniCallType.objectType,
          [hostnameVerifier.reference]).object);

  static final _id_certificatePinner = jniAccessors.getMethodIDOf(
      _classRef,
      "certificatePinner",
      "(Lokhttp3/CertificatePinner;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder certificatePinner(okhttp3.CertificatePinner certificatePinner)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder certificatePinner(jni.JObject certificatePinner) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_certificatePinner,
          jni.JniCallType.objectType,
          [certificatePinner.reference]).object);

  static final _id_authenticator = jniAccessors.getMethodIDOf(
      _classRef,
      "authenticator",
      "(Lokhttp3/Authenticator;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder authenticator(okhttp3.Authenticator authenticator)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder authenticator(jni.JObject authenticator) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_authenticator,
          jni.JniCallType.objectType,
          [authenticator.reference]).object);

  static final _id_proxyAuthenticator = jniAccessors.getMethodIDOf(
      _classRef,
      "proxyAuthenticator",
      "(Lokhttp3/Authenticator;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder proxyAuthenticator(okhttp3.Authenticator authenticator)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder proxyAuthenticator(jni.JObject authenticator) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_proxyAuthenticator,
          jni.JniCallType.objectType,
          [authenticator.reference]).object);

  static final _id_connectionPool = jniAccessors.getMethodIDOf(
      _classRef,
      "connectionPool",
      "(Lokhttp3/ConnectionPool;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder connectionPool(okhttp3.ConnectionPool connectionPool)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder connectionPool(jni.JObject connectionPool) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_connectionPool,
          jni.JniCallType.objectType,
          [connectionPool.reference]).object);

  static final _id_followSslRedirects = jniAccessors.getMethodIDOf(
      _classRef, "followSslRedirects", "(Z)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder followSslRedirects(boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder followSslRedirects(bool z) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_followSslRedirects,
          jni.JniCallType.objectType,
          [z]).object);

  static final _id_followRedirects = jniAccessors.getMethodIDOf(
      _classRef, "followRedirects", "(Z)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder followRedirects(boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder followRedirects(bool z) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_followRedirects,
          jni.JniCallType.objectType,
          [z]).object);

  static final _id_retryOnConnectionFailure = jniAccessors.getMethodIDOf(
      _classRef,
      "retryOnConnectionFailure",
      "(Z)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder retryOnConnectionFailure(boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder retryOnConnectionFailure(bool z) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_retryOnConnectionFailure,
          jni.JniCallType.objectType,
          [z]).object);

  static final _id_dispatcher = jniAccessors.getMethodIDOf(_classRef,
      "dispatcher", "(Lokhttp3/Dispatcher;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder dispatcher(okhttp3.Dispatcher dispatcher)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder dispatcher(jni.JObject dispatcher) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_dispatcher,
          jni.JniCallType.objectType,
          [dispatcher.reference]).object);

  static final _id_protocols = jniAccessors.getMethodIDOf(_classRef,
      "protocols", "(Ljava/util/List;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder protocols(java.util.List list)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder protocols(jni.JObject list) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_protocols,
          jni.JniCallType.objectType,
          [list.reference]).object);

  static final _id_connectionSpecs = jniAccessors.getMethodIDOf(_classRef,
      "connectionSpecs", "(Ljava/util/List;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder connectionSpecs(java.util.List list)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder connectionSpecs(jni.JObject list) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_connectionSpecs,
          jni.JniCallType.objectType,
          [list.reference]).object);

  static final _id_interceptors = jniAccessors.getMethodIDOf(
      _classRef, "interceptors", "()Ljava/util/List;");

  /// from: public java.util.List interceptors()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject interceptors() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_interceptors, jni.JniCallType.objectType, []).object);

  static final _id_addInterceptor = jniAccessors.getMethodIDOf(
      _classRef,
      "addInterceptor",
      "(Lokhttp3/Interceptor;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor interceptor)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder addInterceptor(jni.JObject interceptor) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_addInterceptor,
          jni.JniCallType.objectType,
          [interceptor.reference]).object);

  static final _id_networkInterceptors = jniAccessors.getMethodIDOf(
      _classRef, "networkInterceptors", "()Ljava/util/List;");

  /// from: public java.util.List networkInterceptors()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject networkInterceptors() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_networkInterceptors, jni.JniCallType.objectType, []).object);

  static final _id_addNetworkInterceptor = jniAccessors.getMethodIDOf(
      _classRef,
      "addNetworkInterceptor",
      "(Lokhttp3/Interceptor;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder addNetworkInterceptor(okhttp3.Interceptor interceptor)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder addNetworkInterceptor(jni.JObject interceptor) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_addNetworkInterceptor,
          jni.JniCallType.objectType,
          [interceptor.reference]).object);

  static final _id_eventListener = jniAccessors.getMethodIDOf(
      _classRef,
      "eventListener",
      "(Lokhttp3/EventListener;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder eventListener(okhttp3.EventListener eventListener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder eventListener(jni.JObject eventListener) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_eventListener,
          jni.JniCallType.objectType,
          [eventListener.reference]).object);

  static final _id_eventListenerFactory = jniAccessors.getMethodIDOf(
      _classRef,
      "eventListenerFactory",
      "(Lokhttp3/EventListener\$Factory;)Lokhttp3/OkHttpClient\$Builder;");

  /// from: public okhttp3.OkHttpClient$Builder eventListenerFactory(okhttp3.EventListener$Factory factory)
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient_Builder eventListenerFactory(jni.JObject factory0) =>
      const $OkHttpClient_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_eventListenerFactory,
          jni.JniCallType.objectType,
          [factory0.reference]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Lokhttp3/OkHttpClient;");

  /// from: public okhttp3.OkHttpClient build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  OkHttpClient build() =>
      const $OkHttpClientType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniCallType.objectType, []).object);
}

class $OkHttpClient_BuilderType extends jni.JObjType<OkHttpClient_Builder> {
  const $OkHttpClient_BuilderType();

  @override
  String get signature => r"Lokhttp3/OkHttpClient$Builder;";

  @override
  OkHttpClient_Builder fromRef(jni.JObjectPtr ref) =>
      OkHttpClient_Builder.fromRef(ref);
}

extension $OkHttpClient_BuilderArray on jni.JArray<OkHttpClient_Builder> {
  OkHttpClient_Builder operator [](int index) {
    return (elementType as $OkHttpClient_BuilderType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, OkHttpClient_Builder value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okhttp3.Call
class Call extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  Call.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors.getClassOf("okhttp3/Call");

  /// The type which includes information such as the signature of this class.
  static const type = $CallType();

  static final _id_request =
      jniAccessors.getMethodIDOf(_classRef, "request", "()Lokhttp3/Request;");

  /// from: public abstract okhttp3.Request request()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request request() =>
      const $RequestType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_request, jni.JniCallType.objectType, []).object);

  static final _id_execute =
      jniAccessors.getMethodIDOf(_classRef, "execute", "()Lokhttp3/Response;");

  /// from: public abstract okhttp3.Response execute()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Response execute() =>
      const $ResponseType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_execute, jni.JniCallType.objectType, []).object);

  static final _id_enqueue =
      jniAccessors.getMethodIDOf(_classRef, "enqueue", "(Lokhttp3/Callback;)V");

  /// from: public abstract void enqueue(okhttp3.Callback callback)
  void enqueue(jni.JObject callback) => jniAccessors.callMethodWithArgs(
      reference,
      _id_enqueue,
      jni.JniCallType.voidType,
      [callback.reference]).check();

  static final _id_cancel =
      jniAccessors.getMethodIDOf(_classRef, "cancel", "()V");

  /// from: public abstract void cancel()
  void cancel() => jniAccessors.callMethodWithArgs(
      reference, _id_cancel, jni.JniCallType.voidType, []).check();

  static final _id_isExecuted =
      jniAccessors.getMethodIDOf(_classRef, "isExecuted", "()Z");

  /// from: public abstract boolean isExecuted()
  bool isExecuted() => jniAccessors.callMethodWithArgs(
      reference, _id_isExecuted, jni.JniCallType.booleanType, []).boolean;

  static final _id_isCanceled =
      jniAccessors.getMethodIDOf(_classRef, "isCanceled", "()Z");

  /// from: public abstract boolean isCanceled()
  bool isCanceled() => jniAccessors.callMethodWithArgs(
      reference, _id_isCanceled, jni.JniCallType.booleanType, []).boolean;

  static final _id_timeout =
      jniAccessors.getMethodIDOf(_classRef, "timeout", "()Lokio/Timeout;");

  /// from: public abstract okio.Timeout timeout()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject timeout() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_timeout, jni.JniCallType.objectType, []).object);

  static final _id_clone =
      jniAccessors.getMethodIDOf(_classRef, "clone", "()Lokhttp3/Call;");

  /// from: public abstract okhttp3.Call clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Call clone() => const $CallType().fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_clone, jni.JniCallType.objectType, []).object);
}

class $CallType extends jni.JObjType<Call> {
  const $CallType();

  @override
  String get signature => r"Lokhttp3/Call;";

  @override
  Call fromRef(jni.JObjectPtr ref) => Call.fromRef(ref);
}

extension $CallArray on jni.JArray<Call> {
  Call operator [](int index) {
    return (elementType as $CallType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, Call value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okhttp3.Headers
class Headers extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  Headers.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors.getClassOf("okhttp3/Headers");

  /// The type which includes information such as the signature of this class.
  static const type = $HeadersType();

  static final _id_get0 = jniAccessors.getMethodIDOf(
      _classRef, "get", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String get(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString get0(jni.JString string) =>
      const jni.JStringType().fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_get0, jni.JniCallType.objectType, [string.reference]).object);

  static final _id_getDate = jniAccessors.getMethodIDOf(
      _classRef, "getDate", "(Ljava/lang/String;)Ljava/util/Date;");

  /// from: public java.util.Date getDate(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getDate(jni.JString string) =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getDate, jni.JniCallType.objectType, [string.reference]).object);

  static final _id_getInstant = jniAccessors.getMethodIDOf(
      _classRef, "getInstant", "(Ljava/lang/String;)Ljava/time/Instant;");

  /// from: public java.time.Instant getInstant(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getInstant(jni.JString string) =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getInstant,
          jni.JniCallType.objectType,
          [string.reference]).object);

  static final _id_size = jniAccessors.getMethodIDOf(_classRef, "size", "()I");

  /// from: public int size()
  int size() => jniAccessors.callMethodWithArgs(
      reference, _id_size, jni.JniCallType.intType, []).integer;

  static final _id_name =
      jniAccessors.getMethodIDOf(_classRef, "name", "(I)Ljava/lang/String;");

  /// from: public java.lang.String name(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString name(int i) =>
      const jni.JStringType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_name, jni.JniCallType.objectType, [i]).object);

  static final _id_value =
      jniAccessors.getMethodIDOf(_classRef, "value", "(I)Ljava/lang/String;");

  /// from: public java.lang.String value(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString value(int i) =>
      const jni.JStringType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_value, jni.JniCallType.objectType, [i]).object);

  static final _id_names =
      jniAccessors.getMethodIDOf(_classRef, "names", "()Ljava/util/Set;");

  /// from: public java.util.Set names()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject names() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_names, jni.JniCallType.objectType, []).object);

  static final _id_values = jniAccessors.getMethodIDOf(
      _classRef, "values", "(Ljava/lang/String;)Ljava/util/List;");

  /// from: public java.util.List values(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject values(jni.JString string) =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_values, jni.JniCallType.objectType, [string.reference]).object);

  static final _id_byteCount =
      jniAccessors.getMethodIDOf(_classRef, "byteCount", "()J");

  /// from: public long byteCount()
  int byteCount() => jniAccessors.callMethodWithArgs(
      reference, _id_byteCount, jni.JniCallType.longType, []).long;

  static final _id_newBuilder = jniAccessors.getMethodIDOf(
      _classRef, "newBuilder", "()Lokhttp3/Headers\$Builder;");

  /// from: public okhttp3.Headers$Builder newBuilder()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers_Builder newBuilder() =>
      const $Headers_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_newBuilder, jni.JniCallType.objectType, []).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object object)
  bool equals1(jni.JObject object) => jniAccessors.callMethodWithArgs(reference,
      _id_equals1, jni.JniCallType.booleanType, [object.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniCallType.intType, []).integer;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString toString1() =>
      const jni.JStringType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniCallType.objectType, []).object);

  static final _id_toMultimap =
      jniAccessors.getMethodIDOf(_classRef, "toMultimap", "()Ljava/util/Map;");

  /// from: public java.util.Map toMultimap()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject toMultimap() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toMultimap, jni.JniCallType.objectType, []).object);

  static final _id_of = jniAccessors.getStaticMethodIDOf(
      _classRef, "of", "([Ljava/lang/String;)Lokhttp3/Headers;");

  /// from: static public okhttp3.Headers of(java.lang.String[] strings)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Headers of(jni.JArray<jni.JString> strings) =>
      const $HeadersType().fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_of,
          jni.JniCallType.objectType,
          [strings.reference]).object);

  static final _id_of1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "of", "(Ljava/util/Map;)Lokhttp3/Headers;");

  /// from: static public okhttp3.Headers of(java.util.Map map)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Headers of1(jni.JObject map) =>
      const $HeadersType().fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_of1,
          jni.JniCallType.objectType,
          [map.reference]).object);
}

class $HeadersType extends jni.JObjType<Headers> {
  const $HeadersType();

  @override
  String get signature => r"Lokhttp3/Headers;";

  @override
  Headers fromRef(jni.JObjectPtr ref) => Headers.fromRef(ref);
}

extension $HeadersArray on jni.JArray<Headers> {
  Headers operator [](int index) {
    return (elementType as $HeadersType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, Headers value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okhttp3.Headers$Builder
class Headers_Builder extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  Headers_Builder.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors.getClassOf("okhttp3/Headers\$Builder");

  /// The type which includes information such as the signature of this class.
  static const type = $Headers_BuilderType();

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers_Builder()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_add = jniAccessors.getMethodIDOf(
      _classRef, "add", "(Ljava/lang/String;)Lokhttp3/Headers\$Builder;");

  /// from: public okhttp3.Headers$Builder add(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers_Builder add(jni.JString string) =>
      const $Headers_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_add,
          jni.JniCallType.objectType,
          [string.reference]).object);

  static final _id_add1 = jniAccessors.getMethodIDOf(_classRef, "add",
      "(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers\$Builder;");

  /// from: public okhttp3.Headers$Builder add(java.lang.String string, java.lang.String string1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers_Builder add1(jni.JString string, jni.JString string1) =>
      const $Headers_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_add1,
          jni.JniCallType.objectType,
          [string.reference, string1.reference]).object);

  static final _id_addUnsafeNonAscii = jniAccessors.getMethodIDOf(
      _classRef,
      "addUnsafeNonAscii",
      "(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers\$Builder;");

  /// from: public okhttp3.Headers$Builder addUnsafeNonAscii(java.lang.String string, java.lang.String string1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers_Builder addUnsafeNonAscii(jni.JString string, jni.JString string1) =>
      const $Headers_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_addUnsafeNonAscii,
          jni.JniCallType.objectType,
          [string.reference, string1.reference]).object);

  static final _id_addAll = jniAccessors.getMethodIDOf(
      _classRef, "addAll", "(Lokhttp3/Headers;)Lokhttp3/Headers\$Builder;");

  /// from: public okhttp3.Headers$Builder addAll(okhttp3.Headers headers)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers_Builder addAll(Headers headers) =>
      const $Headers_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_addAll,
          jni.JniCallType.objectType,
          [headers.reference]).object);

  static final _id_add2 = jniAccessors.getMethodIDOf(_classRef, "add",
      "(Ljava/lang/String;Ljava/util/Date;)Lokhttp3/Headers\$Builder;");

  /// from: public okhttp3.Headers$Builder add(java.lang.String string, java.util.Date date)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers_Builder add2(jni.JString string, jni.JObject date) =>
      const $Headers_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_add2,
          jni.JniCallType.objectType,
          [string.reference, date.reference]).object);

  static final _id_add3 = jniAccessors.getMethodIDOf(_classRef, "add",
      "(Ljava/lang/String;Ljava/time/Instant;)Lokhttp3/Headers\$Builder;");

  /// from: public okhttp3.Headers$Builder add(java.lang.String string, java.time.Instant instant)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers_Builder add3(jni.JString string, jni.JObject instant) =>
      const $Headers_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_add3,
          jni.JniCallType.objectType,
          [string.reference, instant.reference]).object);

  static final _id_set0 = jniAccessors.getMethodIDOf(_classRef, "set",
      "(Ljava/lang/String;Ljava/util/Date;)Lokhttp3/Headers\$Builder;");

  /// from: public okhttp3.Headers$Builder set(java.lang.String string, java.util.Date date)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers_Builder set0(jni.JString string, jni.JObject date) =>
      const $Headers_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_set0,
          jni.JniCallType.objectType,
          [string.reference, date.reference]).object);

  static final _id_set1 = jniAccessors.getMethodIDOf(_classRef, "set",
      "(Ljava/lang/String;Ljava/time/Instant;)Lokhttp3/Headers\$Builder;");

  /// from: public okhttp3.Headers$Builder set(java.lang.String string, java.time.Instant instant)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers_Builder set1(jni.JString string, jni.JObject instant) =>
      const $Headers_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_set1,
          jni.JniCallType.objectType,
          [string.reference, instant.reference]).object);

  static final _id_removeAll = jniAccessors.getMethodIDOf(
      _classRef, "removeAll", "(Ljava/lang/String;)Lokhttp3/Headers\$Builder;");

  /// from: public okhttp3.Headers$Builder removeAll(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers_Builder removeAll(jni.JString string) =>
      const $Headers_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_removeAll,
          jni.JniCallType.objectType,
          [string.reference]).object);

  static final _id_set2 = jniAccessors.getMethodIDOf(_classRef, "set",
      "(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers\$Builder;");

  /// from: public okhttp3.Headers$Builder set(java.lang.String string, java.lang.String string1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers_Builder set2(jni.JString string, jni.JString string1) =>
      const $Headers_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_set2,
          jni.JniCallType.objectType,
          [string.reference, string1.reference]).object);

  static final _id_get0 = jniAccessors.getMethodIDOf(
      _classRef, "get", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String get(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString get0(jni.JString string) =>
      const jni.JStringType().fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_get0, jni.JniCallType.objectType, [string.reference]).object);

  static final _id_build =
      jniAccessors.getMethodIDOf(_classRef, "build", "()Lokhttp3/Headers;");

  /// from: public okhttp3.Headers build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers build() =>
      const $HeadersType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniCallType.objectType, []).object);
}

class $Headers_BuilderType extends jni.JObjType<Headers_Builder> {
  const $Headers_BuilderType();

  @override
  String get signature => r"Lokhttp3/Headers$Builder;";

  @override
  Headers_Builder fromRef(jni.JObjectPtr ref) => Headers_Builder.fromRef(ref);
}

extension $Headers_BuilderArray on jni.JArray<Headers_Builder> {
  Headers_Builder operator [](int index) {
    return (elementType as $Headers_BuilderType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, Headers_Builder value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okhttp3.Request
class Request extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  Request.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors.getClassOf("okhttp3/Request");

  /// The type which includes information such as the signature of this class.
  static const type = $RequestType();

  static final _id_url =
      jniAccessors.getMethodIDOf(_classRef, "url", "()Lokhttp3/HttpUrl;");

  /// from: public okhttp3.HttpUrl url()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject url() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_url, jni.JniCallType.objectType, []).object);

  static final _id_method =
      jniAccessors.getMethodIDOf(_classRef, "method", "()Ljava/lang/String;");

  /// from: public java.lang.String method()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString method() =>
      const jni.JStringType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_method, jni.JniCallType.objectType, []).object);

  static final _id_headers =
      jniAccessors.getMethodIDOf(_classRef, "headers", "()Lokhttp3/Headers;");

  /// from: public okhttp3.Headers headers()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers headers() =>
      const $HeadersType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_headers, jni.JniCallType.objectType, []).object);

  static final _id_header = jniAccessors.getMethodIDOf(
      _classRef, "header", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String header(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString header(jni.JString string) =>
      const jni.JStringType().fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_header, jni.JniCallType.objectType, [string.reference]).object);

  static final _id_headers1 = jniAccessors.getMethodIDOf(
      _classRef, "headers", "(Ljava/lang/String;)Ljava/util/List;");

  /// from: public java.util.List headers(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject headers1(jni.JString string) =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_headers1, jni.JniCallType.objectType, [string.reference]).object);

  static final _id_body =
      jniAccessors.getMethodIDOf(_classRef, "body", "()Lokhttp3/RequestBody;");

  /// from: public okhttp3.RequestBody body()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RequestBody body() =>
      const $RequestBodyType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_body, jni.JniCallType.objectType, []).object);

  static final _id_tag =
      jniAccessors.getMethodIDOf(_classRef, "tag", "()Ljava/lang/Object;");

  /// from: public java.lang.Object tag()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject tag() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_tag, jni.JniCallType.objectType, []).object);

  static final _id_tag1 = jniAccessors.getMethodIDOf(
      _classRef, "tag", "(Ljava/lang/Class;)Ljava/lang/Object;");

  /// from: public T tag(java.lang.Class class)
  /// The returned object must be deleted after use, by calling the `delete` method.
  T tag1<T extends jni.JObject>(jni.JObjType<T> $T, jni.JObject class0) =>
      $T.fromRef(jniAccessors.callMethodWithArgs(reference, _id_tag1,
          jni.JniCallType.objectType, [class0.reference]).object);

  static final _id_newBuilder = jniAccessors.getMethodIDOf(
      _classRef, "newBuilder", "()Lokhttp3/Request\$Builder;");

  /// from: public okhttp3.Request$Builder newBuilder()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder newBuilder() =>
      const $Request_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_newBuilder, jni.JniCallType.objectType, []).object);

  static final _id_cacheControl = jniAccessors.getMethodIDOf(
      _classRef, "cacheControl", "()Lokhttp3/CacheControl;");

  /// from: public okhttp3.CacheControl cacheControl()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject cacheControl() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_cacheControl, jni.JniCallType.objectType, []).object);

  static final _id_isHttps =
      jniAccessors.getMethodIDOf(_classRef, "isHttps", "()Z");

  /// from: public boolean isHttps()
  bool isHttps() => jniAccessors.callMethodWithArgs(
      reference, _id_isHttps, jni.JniCallType.booleanType, []).boolean;

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString toString1() =>
      const jni.JStringType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniCallType.objectType, []).object);
}

class $RequestType extends jni.JObjType<Request> {
  const $RequestType();

  @override
  String get signature => r"Lokhttp3/Request;";

  @override
  Request fromRef(jni.JObjectPtr ref) => Request.fromRef(ref);
}

extension $RequestArray on jni.JArray<Request> {
  Request operator [](int index) {
    return (elementType as $RequestType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, Request value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okhttp3.Request$Builder
class Request_Builder extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  Request_Builder.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors.getClassOf("okhttp3/Request\$Builder");

  /// The type which includes information such as the signature of this class.
  static const type = $Request_BuilderType();

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_url = jniAccessors.getMethodIDOf(
      _classRef, "url", "(Lokhttp3/HttpUrl;)Lokhttp3/Request\$Builder;");

  /// from: public okhttp3.Request$Builder url(okhttp3.HttpUrl httpUrl)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder url(jni.JObject httpUrl) =>
      const $Request_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_url,
          jni.JniCallType.objectType,
          [httpUrl.reference]).object);

  static final _id_url1 = jniAccessors.getMethodIDOf(
      _classRef, "url", "(Ljava/lang/String;)Lokhttp3/Request\$Builder;");

  /// from: public okhttp3.Request$Builder url(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder url1(jni.JString string) =>
      const $Request_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_url1,
          jni.JniCallType.objectType,
          [string.reference]).object);

  static final _id_url2 = jniAccessors.getMethodIDOf(
      _classRef, "url", "(Ljava/net/URL;)Lokhttp3/Request\$Builder;");

  /// from: public okhttp3.Request$Builder url(java.net.URL uRL)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder url2(jni.JObject uRL) =>
      const $Request_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_url2,
          jni.JniCallType.objectType,
          [uRL.reference]).object);

  static final _id_header = jniAccessors.getMethodIDOf(_classRef, "header",
      "(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request\$Builder;");

  /// from: public okhttp3.Request$Builder header(java.lang.String string, java.lang.String string1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder header(jni.JString string, jni.JString string1) =>
      const $Request_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_header,
          jni.JniCallType.objectType,
          [string.reference, string1.reference]).object);

  static final _id_addHeader = jniAccessors.getMethodIDOf(
      _classRef,
      "addHeader",
      "(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request\$Builder;");

  /// from: public okhttp3.Request$Builder addHeader(java.lang.String string, java.lang.String string1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder addHeader(jni.JString string, jni.JString string1) =>
      const $Request_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_addHeader,
          jni.JniCallType.objectType,
          [string.reference, string1.reference]).object);

  static final _id_removeHeader = jniAccessors.getMethodIDOf(_classRef,
      "removeHeader", "(Ljava/lang/String;)Lokhttp3/Request\$Builder;");

  /// from: public okhttp3.Request$Builder removeHeader(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder removeHeader(jni.JString string) =>
      const $Request_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_removeHeader,
          jni.JniCallType.objectType,
          [string.reference]).object);

  static final _id_headers = jniAccessors.getMethodIDOf(
      _classRef, "headers", "(Lokhttp3/Headers;)Lokhttp3/Request\$Builder;");

  /// from: public okhttp3.Request$Builder headers(okhttp3.Headers headers)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder headers(Headers headers) =>
      const $Request_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_headers,
          jni.JniCallType.objectType,
          [headers.reference]).object);

  static final _id_cacheControl = jniAccessors.getMethodIDOf(_classRef,
      "cacheControl", "(Lokhttp3/CacheControl;)Lokhttp3/Request\$Builder;");

  /// from: public okhttp3.Request$Builder cacheControl(okhttp3.CacheControl cacheControl)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder cacheControl(jni.JObject cacheControl) =>
      const $Request_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_cacheControl,
          jni.JniCallType.objectType,
          [cacheControl.reference]).object);

  static final _id_get0 = jniAccessors.getMethodIDOf(
      _classRef, "get", "()Lokhttp3/Request\$Builder;");

  /// from: public okhttp3.Request$Builder get()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder get0() =>
      const $Request_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_get0, jni.JniCallType.objectType, []).object);

  static final _id_head = jniAccessors.getMethodIDOf(
      _classRef, "head", "()Lokhttp3/Request\$Builder;");

  /// from: public okhttp3.Request$Builder head()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder head() =>
      const $Request_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_head, jni.JniCallType.objectType, []).object);

  static final _id_post = jniAccessors.getMethodIDOf(
      _classRef, "post", "(Lokhttp3/RequestBody;)Lokhttp3/Request\$Builder;");

  /// from: public okhttp3.Request$Builder post(okhttp3.RequestBody requestBody)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder post(RequestBody requestBody) =>
      const $Request_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_post,
          jni.JniCallType.objectType,
          [requestBody.reference]).object);

  static final _id_delete1 = jniAccessors.getMethodIDOf(
      _classRef, "delete", "(Lokhttp3/RequestBody;)Lokhttp3/Request\$Builder;");

  /// from: public okhttp3.Request$Builder delete(okhttp3.RequestBody requestBody)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder delete1(RequestBody requestBody) =>
      const $Request_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_delete1,
          jni.JniCallType.objectType,
          [requestBody.reference]).object);

  static final _id_delete2 = jniAccessors.getMethodIDOf(
      _classRef, "delete", "()Lokhttp3/Request\$Builder;");

  /// from: public okhttp3.Request$Builder delete()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder delete2() =>
      const $Request_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_delete2, jni.JniCallType.objectType, []).object);

  static final _id_put = jniAccessors.getMethodIDOf(
      _classRef, "put", "(Lokhttp3/RequestBody;)Lokhttp3/Request\$Builder;");

  /// from: public okhttp3.Request$Builder put(okhttp3.RequestBody requestBody)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder put(RequestBody requestBody) =>
      const $Request_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_put,
          jni.JniCallType.objectType,
          [requestBody.reference]).object);

  static final _id_patch = jniAccessors.getMethodIDOf(
      _classRef, "patch", "(Lokhttp3/RequestBody;)Lokhttp3/Request\$Builder;");

  /// from: public okhttp3.Request$Builder patch(okhttp3.RequestBody requestBody)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder patch(RequestBody requestBody) =>
      const $Request_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_patch,
          jni.JniCallType.objectType,
          [requestBody.reference]).object);

  static final _id_method = jniAccessors.getMethodIDOf(_classRef, "method",
      "(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request\$Builder;");

  /// from: public okhttp3.Request$Builder method(java.lang.String string, okhttp3.RequestBody requestBody)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder method(jni.JString string, RequestBody requestBody) =>
      const $Request_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_method,
          jni.JniCallType.objectType,
          [string.reference, requestBody.reference]).object);

  static final _id_tag = jniAccessors.getMethodIDOf(
      _classRef, "tag", "(Ljava/lang/Object;)Lokhttp3/Request\$Builder;");

  /// from: public okhttp3.Request$Builder tag(java.lang.Object object)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder tag(jni.JObject object) =>
      const $Request_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_tag,
          jni.JniCallType.objectType,
          [object.reference]).object);

  static final _id_tag1 = jniAccessors.getMethodIDOf(_classRef, "tag",
      "(Ljava/lang/Class;Ljava/lang/Object;)Lokhttp3/Request\$Builder;");

  /// from: public okhttp3.Request$Builder tag(java.lang.Class class, T object)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request_Builder tag1<T extends jni.JObject>(
          jni.JObjType<T> $T, jni.JObject class0, T object) =>
      const $Request_BuilderType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_tag1,
          jni.JniCallType.objectType,
          [class0.reference, object.reference]).object);

  static final _id_build =
      jniAccessors.getMethodIDOf(_classRef, "build", "()Lokhttp3/Request;");

  /// from: public okhttp3.Request build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request build() =>
      const $RequestType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniCallType.objectType, []).object);
}

class $Request_BuilderType extends jni.JObjType<Request_Builder> {
  const $Request_BuilderType();

  @override
  String get signature => r"Lokhttp3/Request$Builder;";

  @override
  Request_Builder fromRef(jni.JObjectPtr ref) => Request_Builder.fromRef(ref);
}

extension $Request_BuilderArray on jni.JArray<Request_Builder> {
  Request_Builder operator [](int index) {
    return (elementType as $Request_BuilderType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, Request_Builder value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okhttp3.RequestBody
class RequestBody extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  RequestBody.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors.getClassOf("okhttp3/RequestBody");

  /// The type which includes information such as the signature of this class.
  static const type = $RequestBodyType();

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  RequestBody()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_contentType = jniAccessors.getMethodIDOf(
      _classRef, "contentType", "()Lokhttp3/MediaType;");

  /// from: public abstract okhttp3.MediaType contentType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  MediaType contentType() =>
      const $MediaTypeType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_contentType, jni.JniCallType.objectType, []).object);

  static final _id_contentLength =
      jniAccessors.getMethodIDOf(_classRef, "contentLength", "()J");

  /// from: public long contentLength()
  int contentLength() => jniAccessors.callMethodWithArgs(
      reference, _id_contentLength, jni.JniCallType.longType, []).long;

  static final _id_writeTo = jniAccessors.getMethodIDOf(
      _classRef, "writeTo", "(Lokio/BufferedSink;)V");

  /// from: public abstract void writeTo(okio.BufferedSink bufferedSink)
  void writeTo(jni.JObject bufferedSink) => jniAccessors.callMethodWithArgs(
      reference,
      _id_writeTo,
      jni.JniCallType.voidType,
      [bufferedSink.reference]).check();

  static final _id_isDuplex =
      jniAccessors.getMethodIDOf(_classRef, "isDuplex", "()Z");

  /// from: public boolean isDuplex()
  bool isDuplex() => jniAccessors.callMethodWithArgs(
      reference, _id_isDuplex, jni.JniCallType.booleanType, []).boolean;

  static final _id_isOneShot =
      jniAccessors.getMethodIDOf(_classRef, "isOneShot", "()Z");

  /// from: public boolean isOneShot()
  bool isOneShot() => jniAccessors.callMethodWithArgs(
      reference, _id_isOneShot, jni.JniCallType.booleanType, []).boolean;

  static final _id_create = jniAccessors.getStaticMethodIDOf(_classRef,
      "create", "(Lokhttp3/MediaType;Ljava/lang/String;)Lokhttp3/RequestBody;");

  /// from: static public okhttp3.RequestBody create(okhttp3.MediaType mediaType, java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static RequestBody create(MediaType mediaType, jni.JString string) =>
      const $RequestBodyType().fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_create,
          jni.JniCallType.objectType,
          [mediaType.reference, string.reference]).object);

  static final _id_create1 = jniAccessors.getStaticMethodIDOf(_classRef,
      "create", "(Lokhttp3/MediaType;Lokio/ByteString;)Lokhttp3/RequestBody;");

  /// from: static public okhttp3.RequestBody create(okhttp3.MediaType mediaType, okio.ByteString byteString)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static RequestBody create1(MediaType mediaType, jni.JObject byteString) =>
      const $RequestBodyType().fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_create1,
          jni.JniCallType.objectType,
          [mediaType.reference, byteString.reference]).object);

  static final _id_create2 = jniAccessors.getStaticMethodIDOf(
      _classRef, "create", "(Lokhttp3/MediaType;[B)Lokhttp3/RequestBody;");

  /// from: static public okhttp3.RequestBody create(okhttp3.MediaType mediaType, byte[] bs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static RequestBody create2(MediaType mediaType, jni.JArray<jni.JByte> bs) =>
      const $RequestBodyType().fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_create2,
          jni.JniCallType.objectType,
          [mediaType.reference, bs.reference]).object);

  static final _id_create3 = jniAccessors.getStaticMethodIDOf(
      _classRef, "create", "(Lokhttp3/MediaType;[BII)Lokhttp3/RequestBody;");

  /// from: static public okhttp3.RequestBody create(okhttp3.MediaType mediaType, byte[] bs, int i, int i1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static RequestBody create3(
          MediaType mediaType, jni.JArray<jni.JByte> bs, int i, int i1) =>
      const $RequestBodyType().fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_create3,
          jni.JniCallType.objectType,
          [mediaType.reference, bs.reference, i, i1]).object);

  static final _id_create4 = jniAccessors.getStaticMethodIDOf(_classRef,
      "create", "(Lokhttp3/MediaType;Ljava/io/File;)Lokhttp3/RequestBody;");

  /// from: static public okhttp3.RequestBody create(okhttp3.MediaType mediaType, java.io.File file)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static RequestBody create4(MediaType mediaType, jni.JObject file) =>
      const $RequestBodyType().fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_create4,
          jni.JniCallType.objectType,
          [mediaType.reference, file.reference]).object);
}

class $RequestBodyType extends jni.JObjType<RequestBody> {
  const $RequestBodyType();

  @override
  String get signature => r"Lokhttp3/RequestBody;";

  @override
  RequestBody fromRef(jni.JObjectPtr ref) => RequestBody.fromRef(ref);
}

extension $RequestBodyArray on jni.JArray<RequestBody> {
  RequestBody operator [](int index) {
    return (elementType as $RequestBodyType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, RequestBody value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okhttp3.MultipartBody
class MultipartBody extends RequestBody {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  MultipartBody.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors.getClassOf("okhttp3/MultipartBody");

  /// The type which includes information such as the signature of this class.
  static const type = $MultipartBodyType();

  static final _id_MIXED = jniAccessors.getStaticFieldIDOf(
      _classRef, "MIXED", "Lokhttp3/MediaType;");

  /// from: static public final okhttp3.MediaType MIXED
  /// The returned object must be deleted after use, by calling the `delete` method.
  static MediaType get MIXED => const $MediaTypeType().fromRef(jniAccessors
      .getStaticField(_classRef, _id_MIXED, jni.JniCallType.objectType)
      .object);

  static final _id_ALTERNATIVE = jniAccessors.getStaticFieldIDOf(
      _classRef, "ALTERNATIVE", "Lokhttp3/MediaType;");

  /// from: static public final okhttp3.MediaType ALTERNATIVE
  /// The returned object must be deleted after use, by calling the `delete` method.
  static MediaType get ALTERNATIVE => const $MediaTypeType().fromRef(
      jniAccessors
          .getStaticField(
              _classRef, _id_ALTERNATIVE, jni.JniCallType.objectType)
          .object);

  static final _id_DIGEST = jniAccessors.getStaticFieldIDOf(
      _classRef, "DIGEST", "Lokhttp3/MediaType;");

  /// from: static public final okhttp3.MediaType DIGEST
  /// The returned object must be deleted after use, by calling the `delete` method.
  static MediaType get DIGEST => const $MediaTypeType().fromRef(jniAccessors
      .getStaticField(_classRef, _id_DIGEST, jni.JniCallType.objectType)
      .object);

  static final _id_PARALLEL = jniAccessors.getStaticFieldIDOf(
      _classRef, "PARALLEL", "Lokhttp3/MediaType;");

  /// from: static public final okhttp3.MediaType PARALLEL
  /// The returned object must be deleted after use, by calling the `delete` method.
  static MediaType get PARALLEL => const $MediaTypeType().fromRef(jniAccessors
      .getStaticField(_classRef, _id_PARALLEL, jni.JniCallType.objectType)
      .object);

  static final _id_FORM =
      jniAccessors.getStaticFieldIDOf(_classRef, "FORM", "Lokhttp3/MediaType;");

  /// from: static public final okhttp3.MediaType FORM
  /// The returned object must be deleted after use, by calling the `delete` method.
  static MediaType get FORM => const $MediaTypeType().fromRef(jniAccessors
      .getStaticField(_classRef, _id_FORM, jni.JniCallType.objectType)
      .object);

  static final _id_boundary =
      jniAccessors.getMethodIDOf(_classRef, "boundary", "()Ljava/lang/String;");

  /// from: public java.lang.String boundary()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString boundary() =>
      const jni.JStringType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_boundary, jni.JniCallType.objectType, []).object);

  static final _id_size = jniAccessors.getMethodIDOf(_classRef, "size", "()I");

  /// from: public int size()
  int size() => jniAccessors.callMethodWithArgs(
      reference, _id_size, jni.JniCallType.intType, []).integer;

  static final _id_parts =
      jniAccessors.getMethodIDOf(_classRef, "parts", "()Ljava/util/List;");

  /// from: public java.util.List parts()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject parts() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_parts, jni.JniCallType.objectType, []).object);

  static final _id_part0 = jniAccessors.getMethodIDOf(
      _classRef, "part", "(I)Lokhttp3/MultipartBody\$Part;");

  /// from: public okhttp3.MultipartBody$Part part(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject part0(int i) =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_part0, jni.JniCallType.objectType, [i]).object);

  static final _id_contentType = jniAccessors.getMethodIDOf(
      _classRef, "contentType", "()Lokhttp3/MediaType;");

  /// from: public okhttp3.MediaType contentType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  MediaType contentType() =>
      const $MediaTypeType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_contentType, jni.JniCallType.objectType, []).object);

  static final _id_contentLength =
      jniAccessors.getMethodIDOf(_classRef, "contentLength", "()J");

  /// from: public long contentLength()
  int contentLength() => jniAccessors.callMethodWithArgs(
      reference, _id_contentLength, jni.JniCallType.longType, []).long;

  static final _id_writeTo = jniAccessors.getMethodIDOf(
      _classRef, "writeTo", "(Lokio/BufferedSink;)V");

  /// from: public void writeTo(okio.BufferedSink bufferedSink)
  void writeTo(jni.JObject bufferedSink) => jniAccessors.callMethodWithArgs(
      reference,
      _id_writeTo,
      jni.JniCallType.voidType,
      [bufferedSink.reference]).check();
}

class $MultipartBodyType extends jni.JObjType<MultipartBody> {
  const $MultipartBodyType();

  @override
  String get signature => r"Lokhttp3/MultipartBody;";

  @override
  MultipartBody fromRef(jni.JObjectPtr ref) => MultipartBody.fromRef(ref);
}

extension $MultipartBodyArray on jni.JArray<MultipartBody> {
  MultipartBody operator [](int index) {
    return (elementType as $MultipartBodyType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, MultipartBody value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okhttp3.MultipartBody$Builder
class MultipartBody_Builder extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  MultipartBody_Builder.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef =
      jniAccessors.getClassOf("okhttp3/MultipartBody\$Builder");

  /// The type which includes information such as the signature of this class.
  static const type = $MultipartBody_BuilderType();

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  MultipartBody_Builder()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MultipartBody_Builder.ctor1(jni.JString string)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [string.reference]).object);

  static final _id_setType = jniAccessors.getMethodIDOf(_classRef, "setType",
      "(Lokhttp3/MediaType;)Lokhttp3/MultipartBody\$Builder;");

  /// from: public okhttp3.MultipartBody$Builder setType(okhttp3.MediaType mediaType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MultipartBody_Builder setType(MediaType mediaType) =>
      const $MultipartBody_BuilderType().fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_setType,
              jni.JniCallType.objectType, [mediaType.reference]).object);

  static final _id_addPart = jniAccessors.getMethodIDOf(_classRef, "addPart",
      "(Lokhttp3/RequestBody;)Lokhttp3/MultipartBody\$Builder;");

  /// from: public okhttp3.MultipartBody$Builder addPart(okhttp3.RequestBody requestBody)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MultipartBody_Builder addPart(RequestBody requestBody) =>
      const $MultipartBody_BuilderType().fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_addPart,
              jni.JniCallType.objectType, [requestBody.reference]).object);

  static final _id_addPart1 = jniAccessors.getMethodIDOf(_classRef, "addPart",
      "(Lokhttp3/Headers;Lokhttp3/RequestBody;)Lokhttp3/MultipartBody\$Builder;");

  /// from: public okhttp3.MultipartBody$Builder addPart(okhttp3.Headers headers, okhttp3.RequestBody requestBody)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MultipartBody_Builder addPart1(Headers headers, RequestBody requestBody) =>
      const $MultipartBody_BuilderType().fromRef(jniAccessors
          .callMethodWithArgs(
              reference,
              _id_addPart1,
              jni.JniCallType.objectType,
              [headers.reference, requestBody.reference]).object);

  static final _id_addFormDataPart = jniAccessors.getMethodIDOf(
      _classRef,
      "addFormDataPart",
      "(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/MultipartBody\$Builder;");

  /// from: public okhttp3.MultipartBody$Builder addFormDataPart(java.lang.String string, java.lang.String string1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MultipartBody_Builder addFormDataPart(
          jni.JString string, jni.JString string1) =>
      const $MultipartBody_BuilderType().fromRef(jniAccessors
          .callMethodWithArgs(
              reference,
              _id_addFormDataPart,
              jni.JniCallType.objectType,
              [string.reference, string1.reference]).object);

  static final _id_addFormDataPart1 = jniAccessors.getMethodIDOf(
      _classRef,
      "addFormDataPart",
      "(Ljava/lang/String;Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/MultipartBody\$Builder;");

  /// from: public okhttp3.MultipartBody$Builder addFormDataPart(java.lang.String string, java.lang.String string1, okhttp3.RequestBody requestBody)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MultipartBody_Builder addFormDataPart1(
          jni.JString string, jni.JString string1, RequestBody requestBody) =>
      const $MultipartBody_BuilderType().fromRef(jniAccessors
          .callMethodWithArgs(
              reference, _id_addFormDataPart1, jni.JniCallType.objectType, [
        string.reference,
        string1.reference,
        requestBody.reference
      ]).object);

  static final _id_addPart2 = jniAccessors.getMethodIDOf(_classRef, "addPart",
      "(Lokhttp3/MultipartBody\$Part;)Lokhttp3/MultipartBody\$Builder;");

  /// from: public okhttp3.MultipartBody$Builder addPart(okhttp3.MultipartBody$Part part)
  /// The returned object must be deleted after use, by calling the `delete` method.
  MultipartBody_Builder addPart2(jni.JObject part0) =>
      const $MultipartBody_BuilderType().fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_addPart2,
              jni.JniCallType.objectType, [part0.reference]).object);

  static final _id_build = jniAccessors.getMethodIDOf(
      _classRef, "build", "()Lokhttp3/MultipartBody;");

  /// from: public okhttp3.MultipartBody build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  MultipartBody build() =>
      const $MultipartBodyType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_build, jni.JniCallType.objectType, []).object);
}

class $MultipartBody_BuilderType extends jni.JObjType<MultipartBody_Builder> {
  const $MultipartBody_BuilderType();

  @override
  String get signature => r"Lokhttp3/MultipartBody$Builder;";

  @override
  MultipartBody_Builder fromRef(jni.JObjectPtr ref) =>
      MultipartBody_Builder.fromRef(ref);
}

extension $MultipartBody_BuilderArray on jni.JArray<MultipartBody_Builder> {
  MultipartBody_Builder operator [](int index) {
    return (elementType as $MultipartBody_BuilderType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, MultipartBody_Builder value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okhttp3.MediaType
class MediaType extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  MediaType.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors.getClassOf("okhttp3/MediaType");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaTypeType();

  static final _id_get0 = jniAccessors.getStaticMethodIDOf(
      _classRef, "get", "(Ljava/lang/String;)Lokhttp3/MediaType;");

  /// from: static public okhttp3.MediaType get(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static MediaType get0(jni.JString string) =>
      const $MediaTypeType().fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_get0,
          jni.JniCallType.objectType,
          [string.reference]).object);

  static final _id_parse = jniAccessors.getStaticMethodIDOf(
      _classRef, "parse", "(Ljava/lang/String;)Lokhttp3/MediaType;");

  /// from: static public okhttp3.MediaType parse(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static MediaType parse(jni.JString string) =>
      const $MediaTypeType().fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_parse,
          jni.JniCallType.objectType,
          [string.reference]).object);

  static final _id_subtype =
      jniAccessors.getMethodIDOf(_classRef, "subtype", "()Ljava/lang/String;");

  /// from: public java.lang.String subtype()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString subtype() =>
      const jni.JStringType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_subtype, jni.JniCallType.objectType, []).object);

  static final _id_charset = jniAccessors.getMethodIDOf(
      _classRef, "charset", "()Ljava/nio/charset/Charset;");

  /// from: public java.nio.charset.Charset charset()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject charset() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_charset, jni.JniCallType.objectType, []).object);

  static final _id_charset1 = jniAccessors.getMethodIDOf(_classRef, "charset",
      "(Ljava/nio/charset/Charset;)Ljava/nio/charset/Charset;");

  /// from: public java.nio.charset.Charset charset(java.nio.charset.Charset charset)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject charset1(jni.JObject charset) =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_charset1,
          jni.JniCallType.objectType,
          [charset.reference]).object);

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString toString1() =>
      const jni.JStringType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniCallType.objectType, []).object);

  static final _id_equals1 =
      jniAccessors.getMethodIDOf(_classRef, "equals", "(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object object)
  bool equals1(jni.JObject object) => jniAccessors.callMethodWithArgs(reference,
      _id_equals1, jni.JniCallType.booleanType, [object.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, "hashCode", "()I");

  /// from: public int hashCode()
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniCallType.intType, []).integer;
}

class $MediaTypeType extends jni.JObjType<MediaType> {
  const $MediaTypeType();

  @override
  String get signature => r"Lokhttp3/MediaType;";

  @override
  MediaType fromRef(jni.JObjectPtr ref) => MediaType.fromRef(ref);
}

extension $MediaTypeArray on jni.JArray<MediaType> {
  MediaType operator [](int index) {
    return (elementType as $MediaTypeType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, MediaType value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okhttp3.Response
class Response extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  Response.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors.getClassOf("okhttp3/Response");

  /// The type which includes information such as the signature of this class.
  static const type = $ResponseType();

  static final _id_request =
      jniAccessors.getMethodIDOf(_classRef, "request", "()Lokhttp3/Request;");

  /// from: public okhttp3.Request request()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Request request() =>
      const $RequestType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_request, jni.JniCallType.objectType, []).object);

  static final _id_protocol =
      jniAccessors.getMethodIDOf(_classRef, "protocol", "()Lokhttp3/Protocol;");

  /// from: public okhttp3.Protocol protocol()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject protocol() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_protocol, jni.JniCallType.objectType, []).object);

  static final _id_code = jniAccessors.getMethodIDOf(_classRef, "code", "()I");

  /// from: public int code()
  int code() => jniAccessors.callMethodWithArgs(
      reference, _id_code, jni.JniCallType.intType, []).integer;

  static final _id_isSuccessful =
      jniAccessors.getMethodIDOf(_classRef, "isSuccessful", "()Z");

  /// from: public boolean isSuccessful()
  bool isSuccessful() => jniAccessors.callMethodWithArgs(
      reference, _id_isSuccessful, jni.JniCallType.booleanType, []).boolean;

  static final _id_message =
      jniAccessors.getMethodIDOf(_classRef, "message", "()Ljava/lang/String;");

  /// from: public java.lang.String message()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString message() =>
      const jni.JStringType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_message, jni.JniCallType.objectType, []).object);

  static final _id_handshake = jniAccessors.getMethodIDOf(
      _classRef, "handshake", "()Lokhttp3/Handshake;");

  /// from: public okhttp3.Handshake handshake()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject handshake() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_handshake, jni.JniCallType.objectType, []).object);

  static final _id_headers = jniAccessors.getMethodIDOf(
      _classRef, "headers", "(Ljava/lang/String;)Ljava/util/List;");

  /// from: public java.util.List headers(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject headers(jni.JString string) =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_headers, jni.JniCallType.objectType, [string.reference]).object);

  static final _id_header = jniAccessors.getMethodIDOf(
      _classRef, "header", "(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String header(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString header(jni.JString string) =>
      const jni.JStringType().fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_header, jni.JniCallType.objectType, [string.reference]).object);

  static final _id_header1 = jniAccessors.getMethodIDOf(_classRef, "header",
      "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String header(java.lang.String string, java.lang.String string1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString header1(jni.JString string, jni.JString string1) =>
      const jni.JStringType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_header1,
          jni.JniCallType.objectType,
          [string.reference, string1.reference]).object);

  static final _id_headers1 =
      jniAccessors.getMethodIDOf(_classRef, "headers", "()Lokhttp3/Headers;");

  /// from: public okhttp3.Headers headers()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers headers1() =>
      const $HeadersType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_headers1, jni.JniCallType.objectType, []).object);

  static final _id_trailers =
      jniAccessors.getMethodIDOf(_classRef, "trailers", "()Lokhttp3/Headers;");

  /// from: public okhttp3.Headers trailers()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Headers trailers() =>
      const $HeadersType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_trailers, jni.JniCallType.objectType, []).object);

  static final _id_peekBody = jniAccessors.getMethodIDOf(
      _classRef, "peekBody", "(J)Lokhttp3/ResponseBody;");

  /// from: public okhttp3.ResponseBody peekBody(long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ResponseBody peekBody(int j) =>
      const $ResponseBodyType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_peekBody, jni.JniCallType.objectType, [j]).object);

  static final _id_body =
      jniAccessors.getMethodIDOf(_classRef, "body", "()Lokhttp3/ResponseBody;");

  /// from: public okhttp3.ResponseBody body()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ResponseBody body() =>
      const $ResponseBodyType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_body, jni.JniCallType.objectType, []).object);

  static final _id_newBuilder = jniAccessors.getMethodIDOf(
      _classRef, "newBuilder", "()Lokhttp3/Response\$Builder;");

  /// from: public okhttp3.Response$Builder newBuilder()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject newBuilder() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_newBuilder, jni.JniCallType.objectType, []).object);

  static final _id_isRedirect =
      jniAccessors.getMethodIDOf(_classRef, "isRedirect", "()Z");

  /// from: public boolean isRedirect()
  bool isRedirect() => jniAccessors.callMethodWithArgs(
      reference, _id_isRedirect, jni.JniCallType.booleanType, []).boolean;

  static final _id_networkResponse = jniAccessors.getMethodIDOf(
      _classRef, "networkResponse", "()Lokhttp3/Response;");

  /// from: public okhttp3.Response networkResponse()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Response networkResponse() =>
      const $ResponseType().fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_networkResponse, jni.JniCallType.objectType, []).object);

  static final _id_cacheResponse = jniAccessors.getMethodIDOf(
      _classRef, "cacheResponse", "()Lokhttp3/Response;");

  /// from: public okhttp3.Response cacheResponse()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Response cacheResponse() =>
      const $ResponseType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_cacheResponse, jni.JniCallType.objectType, []).object);

  static final _id_priorResponse = jniAccessors.getMethodIDOf(
      _classRef, "priorResponse", "()Lokhttp3/Response;");

  /// from: public okhttp3.Response priorResponse()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Response priorResponse() =>
      const $ResponseType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_priorResponse, jni.JniCallType.objectType, []).object);

  static final _id_challenges =
      jniAccessors.getMethodIDOf(_classRef, "challenges", "()Ljava/util/List;");

  /// from: public java.util.List challenges()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject challenges() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_challenges, jni.JniCallType.objectType, []).object);

  static final _id_cacheControl = jniAccessors.getMethodIDOf(
      _classRef, "cacheControl", "()Lokhttp3/CacheControl;");

  /// from: public okhttp3.CacheControl cacheControl()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject cacheControl() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_cacheControl, jni.JniCallType.objectType, []).object);

  static final _id_sentRequestAtMillis =
      jniAccessors.getMethodIDOf(_classRef, "sentRequestAtMillis", "()J");

  /// from: public long sentRequestAtMillis()
  int sentRequestAtMillis() => jniAccessors.callMethodWithArgs(
      reference, _id_sentRequestAtMillis, jni.JniCallType.longType, []).long;

  static final _id_receivedResponseAtMillis =
      jniAccessors.getMethodIDOf(_classRef, "receivedResponseAtMillis", "()J");

  /// from: public long receivedResponseAtMillis()
  int receivedResponseAtMillis() => jniAccessors.callMethodWithArgs(reference,
      _id_receivedResponseAtMillis, jni.JniCallType.longType, []).long;

  static final _id_close =
      jniAccessors.getMethodIDOf(_classRef, "close", "()V");

  /// from: public void close()
  void close() => jniAccessors.callMethodWithArgs(
      reference, _id_close, jni.JniCallType.voidType, []).check();

  static final _id_toString1 =
      jniAccessors.getMethodIDOf(_classRef, "toString", "()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString toString1() =>
      const jni.JStringType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniCallType.objectType, []).object);
}

class $ResponseType extends jni.JObjType<Response> {
  const $ResponseType();

  @override
  String get signature => r"Lokhttp3/Response;";

  @override
  Response fromRef(jni.JObjectPtr ref) => Response.fromRef(ref);
}

extension $ResponseArray on jni.JArray<Response> {
  Response operator [](int index) {
    return (elementType as $ResponseType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, Response value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: okhttp3.ResponseBody
class ResponseBody extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  ResponseBody.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors.getClassOf("okhttp3/ResponseBody");

  /// The type which includes information such as the signature of this class.
  static const type = $ResponseBodyType();

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, "<init>", "()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ResponseBody()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_contentType = jniAccessors.getMethodIDOf(
      _classRef, "contentType", "()Lokhttp3/MediaType;");

  /// from: public abstract okhttp3.MediaType contentType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  MediaType contentType() =>
      const $MediaTypeType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_contentType, jni.JniCallType.objectType, []).object);

  static final _id_contentLength =
      jniAccessors.getMethodIDOf(_classRef, "contentLength", "()J");

  /// from: public abstract long contentLength()
  int contentLength() => jniAccessors.callMethodWithArgs(
      reference, _id_contentLength, jni.JniCallType.longType, []).long;

  static final _id_byteStream = jniAccessors.getMethodIDOf(
      _classRef, "byteStream", "()Ljava/io/InputStream;");

  /// from: public final java.io.InputStream byteStream()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject byteStream() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_byteStream, jni.JniCallType.objectType, []).object);

  static final _id_source = jniAccessors.getMethodIDOf(
      _classRef, "source", "()Lokio/BufferedSource;");

  /// from: public abstract okio.BufferedSource source()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject source() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_source, jni.JniCallType.objectType, []).object);

  static final _id_bytes =
      jniAccessors.getMethodIDOf(_classRef, "bytes", "()[B");

  /// from: public final byte[] bytes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.JByte> bytes() => const jni.JArrayType(jni.JByteType())
      .fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_bytes, jni.JniCallType.objectType, []).object);

  static final _id_charStream =
      jniAccessors.getMethodIDOf(_classRef, "charStream", "()Ljava/io/Reader;");

  /// from: public final java.io.Reader charStream()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject charStream() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_charStream, jni.JniCallType.objectType, []).object);

  static final _id_string =
      jniAccessors.getMethodIDOf(_classRef, "string", "()Ljava/lang/String;");

  /// from: public final java.lang.String string()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString string() =>
      const jni.JStringType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_string, jni.JniCallType.objectType, []).object);

  static final _id_close =
      jniAccessors.getMethodIDOf(_classRef, "close", "()V");

  /// from: public void close()
  void close() => jniAccessors.callMethodWithArgs(
      reference, _id_close, jni.JniCallType.voidType, []).check();

  static final _id_create = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "create",
      "(Lokhttp3/MediaType;Ljava/lang/String;)Lokhttp3/ResponseBody;");

  /// from: static public okhttp3.ResponseBody create(okhttp3.MediaType mediaType, java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static ResponseBody create(MediaType mediaType, jni.JString string) =>
      const $ResponseBodyType().fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_create,
          jni.JniCallType.objectType,
          [mediaType.reference, string.reference]).object);

  static final _id_create1 = jniAccessors.getStaticMethodIDOf(
      _classRef, "create", "(Lokhttp3/MediaType;[B)Lokhttp3/ResponseBody;");

  /// from: static public okhttp3.ResponseBody create(okhttp3.MediaType mediaType, byte[] bs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static ResponseBody create1(MediaType mediaType, jni.JArray<jni.JByte> bs) =>
      const $ResponseBodyType().fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_create1,
          jni.JniCallType.objectType,
          [mediaType.reference, bs.reference]).object);

  static final _id_create2 = jniAccessors.getStaticMethodIDOf(_classRef,
      "create", "(Lokhttp3/MediaType;Lokio/ByteString;)Lokhttp3/ResponseBody;");

  /// from: static public okhttp3.ResponseBody create(okhttp3.MediaType mediaType, okio.ByteString byteString)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static ResponseBody create2(MediaType mediaType, jni.JObject byteString) =>
      const $ResponseBodyType().fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_create2,
          jni.JniCallType.objectType,
          [mediaType.reference, byteString.reference]).object);

  static final _id_create3 = jniAccessors.getStaticMethodIDOf(
      _classRef,
      "create",
      "(Lokhttp3/MediaType;JLokio/BufferedSource;)Lokhttp3/ResponseBody;");

  /// from: static public okhttp3.ResponseBody create(okhttp3.MediaType mediaType, long j, okio.BufferedSource bufferedSource)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static ResponseBody create3(
          MediaType mediaType, int j, jni.JObject bufferedSource) =>
      const $ResponseBodyType().fromRef(jniAccessors.callStaticMethodWithArgs(
          _classRef,
          _id_create3,
          jni.JniCallType.objectType,
          [mediaType.reference, j, bufferedSource.reference]).object);
}

class $ResponseBodyType extends jni.JObjType<ResponseBody> {
  const $ResponseBodyType();

  @override
  String get signature => r"Lokhttp3/ResponseBody;";

  @override
  ResponseBody fromRef(jni.JObjectPtr ref) => ResponseBody.fromRef(ref);
}

extension $ResponseBodyArray on jni.JArray<ResponseBody> {
  ResponseBody operator [](int index) {
    return (elementType as $ResponseBodyType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, ResponseBody value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}
